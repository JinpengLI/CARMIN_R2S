/* soapCarminSoapBindingObject.h
   Generated by gSOAP 2.7.17 from api.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapCarminSoapBindingObject_H
#define soapCarminSoapBindingObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class CarminSoapBindingService : public soap
{    public:
	CarminSoapBindingService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://france-life-imaging.fr/api", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};

	this->namespaces = namespaces; };
	virtual ~CarminSoapBindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__authenticateSession(struct soap*, ns1__authenticateSession *ns1__authenticateSession_, ns1__authenticateSessionResponse *ns1__authenticateSessionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__deleteExecution(struct soap*, ns1__deleteExecution *ns1__deleteExecution_, ns1__deleteExecutionResponse *ns1__deleteExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getPipeline(struct soap*, ns1__getPipeline *ns1__getPipeline_, ns1__getPipelineResponse *ns1__getPipelineResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__authenticateHTTP(struct soap*, ns1__authenticateHTTP *ns1__authenticateHTTP_, ns1__authenticateHTTPResponse *ns1__authenticateHTTPResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__logout(struct soap*, ns1__logout *ns1__logout_, ns1__logoutResponse *ns1__logoutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__updateExecution(struct soap*, ns1__updateExecution *ns1__updateExecution_, ns1__updateExecutionResponse *ns1__updateExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getGlobalProperties(struct soap*, ns1__getGlobalProperties *ns1__getGlobalProperties_, ns1__getGlobalPropertiesResponse *ns1__getGlobalPropertiesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__initExecution(struct soap*, ns1__initExecution *ns1__initExecution_, ns1__initExecutionResponse *ns1__initExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getStdOut(struct soap*, ns1__getStdOut *ns1__getStdOut_, ns1__getStdOutResponse *ns1__getStdOutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getStdErr(struct soap*, ns1__getStdErr *ns1__getStdErr_, ns1__getStdErrResponse *ns1__getStdErrResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getExecutionResults(struct soap*, ns1__getExecutionResults *ns1__getExecutionResults_, ns1__getExecutionResultsResponse *ns1__getExecutionResultsResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__killExecution(struct soap*, ns1__killExecution *ns1__killExecution_, ns1__killExecutionResponse *ns1__killExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getExecution(struct soap*, ns1__getExecution *ns1__getExecution_, ns1__getExecutionResponse *ns1__getExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__playExecution(struct soap*, ns1__playExecution *ns1__playExecution_, ns1__playExecutionResponse *ns1__playExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__listPipelines(struct soap*, ns1__listPipelines *ns1__listPipelines_, ns1__listPipelinesResponse *ns1__listPipelinesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__listExecutions(struct soap*, ns1__listExecutions *ns1__listExecutions_, ns1__listExecutionsResponse *ns1__listExecutionsResponse_);

#endif
