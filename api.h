/* api.h
   Generated by wsdl2h 1.2.17 from api.wsdl and typemap.dat
   2016-01-13 16:59:11 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on api.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://france-life-imaging.fr/api                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://france-life-imaging.fr/api"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://france-life-imaging.fr/api"
//gsoap ns1   schema namespace:	http://france-life-imaging.fr/api
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__authenticateSession.
class ns1__authenticateSession;

//  Forward declaration of class ns1__authenticateSessionResponse.
class ns1__authenticateSessionResponse;

//  Forward declaration of class ns1__Response.
class ns1__Response;

//  Forward declaration of class ns1__Pipeline.
class ns1__Pipeline;

//  Forward declaration of class ns1__Object.
class ns1__Object;

//  Forward declaration of class ns1__ArrayOfStrings.
class ns1__ArrayOfStrings;

//  Forward declaration of class ns1__ArrayOfPipelines.
class ns1__ArrayOfPipelines;

//  Forward declaration of class ns1__ArrayOfExecutions.
class ns1__ArrayOfExecutions;

//  Forward declaration of class ns1__PipelineParameter.
class ns1__PipelineParameter;

//  Forward declaration of class ns1__ParameterTypedValue.
class ns1__ParameterTypedValue;

//  Forward declaration of class ns1__IntKeyStringValuePair.
class ns1__IntKeyStringValuePair;

//  Forward declaration of class ns1__Execution.
class ns1__Execution;

//  Forward declaration of class ns1__StringKeyParameterValuePair.
class ns1__StringKeyParameterValuePair;

//  Forward declaration of class ns1__GlobalProperties.
class ns1__GlobalProperties;

//  Forward declaration of class ns1__PipelineKeyBooleanValuePair.
class ns1__PipelineKeyBooleanValuePair;

//  Forward declaration of class ns1__deleteExecution.
class ns1__deleteExecution;

//  Forward declaration of class ns1__deleteExecutionResponse.
class ns1__deleteExecutionResponse;

//  Forward declaration of class ns1__getPipeline.
class ns1__getPipeline;

//  Forward declaration of class ns1__getPipelineResponse.
class ns1__getPipelineResponse;

//  Forward declaration of class ns1__authenticateHTTP.
class ns1__authenticateHTTP;

//  Forward declaration of class ns1__authenticateHTTPResponse.
class ns1__authenticateHTTPResponse;

//  Forward declaration of class ns1__logout.
class ns1__logout;

//  Forward declaration of class ns1__logoutResponse.
class ns1__logoutResponse;

//  Forward declaration of class ns1__updateExecution.
class ns1__updateExecution;

//  Forward declaration of class ns1__StringKeyValuePair.
class ns1__StringKeyValuePair;

//  Forward declaration of class ns1__updateExecutionResponse.
class ns1__updateExecutionResponse;

//  Forward declaration of class ns1__getGlobalProperties.
class ns1__getGlobalProperties;

//  Forward declaration of class ns1__getGlobalPropertiesResponse.
class ns1__getGlobalPropertiesResponse;

//  Forward declaration of class ns1__initExecution.
class ns1__initExecution;

//  Forward declaration of class ns1__initExecutionResponse.
class ns1__initExecutionResponse;

//  Forward declaration of class ns1__getExecutionResults.
class ns1__getExecutionResults;

//  Forward declaration of class ns1__getExecutionResultsResponse.
class ns1__getExecutionResultsResponse;

//  Forward declaration of class ns1__killExecution.
class ns1__killExecution;

//  Forward declaration of class ns1__getStdOut.
class ns1__getStdOut;

//  Forward declaration of class ns1__getStdOutResponse.
class ns1__getStdOutResponse;

//  Forward declaration of class ns1__getStdErr.
class ns1__getStdErr;

//  Forward declaration of class ns1__getStdErrResponse.
class ns1__getStdErrResponse;

//  Forward declaration of class ns1__killExecutionResponse.
class ns1__killExecutionResponse;

//  Forward declaration of class ns1__getExecution.
class ns1__getExecution;

//  Forward declaration of class ns1__getExecutionResponse.
class ns1__getExecutionResponse;

//  Forward declaration of class ns1__playExecution.
class ns1__playExecution;

//  Forward declaration of class ns1__playExecutionResponse.
class ns1__playExecutionResponse;

//  Forward declaration of class ns1__listPipelines.
class ns1__listPipelines;

//  Forward declaration of class ns1__listPipelinesResponse.
class ns1__listPipelinesResponse;

//  Forward declaration of class ns1__listExecutions.
class ns1__listExecutions;

//  Forward declaration of class ns1__listExecutionsResponse.
class ns1__listExecutionsResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://france-life-imaging.fr/api                                        *
 *                                                                            *
\******************************************************************************/


/// "http://france-life-imaging.fr/api":ParameterType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ParameterType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ParameterType
{
	ns1__ParameterType__File,	///< xs:string value="File"
	ns1__ParameterType__String,	///< xs:string value="String"
	ns1__ParameterType__Boolean,	///< xs:string value="Boolean"
	ns1__ParameterType__Int64,	///< xs:string value="Int64"
	ns1__ParameterType__Double,	///< xs:string value="Double"
	ns1__ParameterType__List,	///< xs:string value="List"
};

/// "http://france-life-imaging.fr/api":ExecutionStatus is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ExecutionStatus' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ExecutionStatus
{
	ns1__ExecutionStatus__Initializing,	///< xs:string value="Initializing"
	ns1__ExecutionStatus__Ready,	///< xs:string value="Ready"
	ns1__ExecutionStatus__Running,	///< xs:string value="Running"
	ns1__ExecutionStatus__Finished,	///< xs:string value="Finished"
	ns1__ExecutionStatus__InitializationFailed,	///< xs:string value="InitializationFailed"
	ns1__ExecutionStatus__ExecutionFailed,	///< xs:string value="ExecutionFailed"
	ns1__ExecutionStatus__Unknown,	///< xs:string value="Unknown"
	ns1__ExecutionStatus__Killed,	///< xs:string value="Killed"
};

/// "http://france-life-imaging.fr/api":Module is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__Module' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__Module
{
	ns1__Module__Processing,	///< xs:string value="Processing"
	ns1__Module__Data,	///< xs:string value="Data"
	ns1__Module__Management,	///< xs:string value="Management"
	ns1__Module__Commercial,	///< xs:string value="Commercial"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://france-life-imaging.fr/api                                        *
 *                                                                            *
\******************************************************************************/


/// "http://france-life-imaging.fr/api":authenticateSession is a complexType.
class ns1__authenticateSession
{ public:
/// Element userName of type xs:string.
    std::string                          userName                       1;	///< Required element.
/// Element password of type xs:string.
    std::string                          password                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":authenticateSessionResponse is a complexType.
class ns1__authenticateSessionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":Response is a complexType.
class ns1__Response
{ public:
/// Element statusCode of type xs:int.
    int                                  statusCode                     1;	///< Required element.
/// Element errorMessage of type xs:string.
    std::string*                         errorMessage                   0;	///< Optional element.
/// CHOICE OF ELEMENTS <xs:choice>
   $int                                  __union_Response              ;	///< Union _ns1__union_Response selector: set to SOAP_UNION__ns1__union_Response_<fieldname>
    union _ns1__union_Response
    {
/// Vector of ns1__Pipeline* with length 0..unbounded
    std::vector<ns1__Pipeline*        > *returnedValuePipeline          0;
/// Element returnedValueExecution of type "http://france-life-imaging.fr/api":Execution.
    ns1__Execution*                      returnedValueExecution         0;	///< Optional element.
/// Element returnedValueGlobalProp of type "http://france-life-imaging.fr/api":GlobalProperties.
    ns1__GlobalProperties*               returnedValueGlobalProp        0;	///< Optional element.
/// Vector of std::string with length 0..unbounded
    std::vector<std::string           > *returnedValueStr               0;
/// Vector of ns1__ArrayOfStrings* with length 0..unbounded
    std::vector<ns1__ArrayOfStrings*  > *returnedValueListStrings       0;
/// Vector of ns1__ArrayOfExecutions* with length 0..unbounded
    std::vector<ns1__ArrayOfExecutions*> *returnedValueListExecutions    0;
/// Vector of ns1__ArrayOfPipelines* with length 0..unbounded
    std::vector<ns1__ArrayOfPipelines*> *returnedValueListPipelines     0;
/// Element returnedValueStatus of type "http://france-life-imaging.fr/api":ExecutionStatus.
    enum ns1__ExecutionStatus*           returnedValueStatus            0;	///< Optional element.
/// Vector of ns1__PipelineKeyBooleanValuePair* with length 0..unbounded
    std::vector<ns1__PipelineKeyBooleanValuePair*> *returnedValuePairKey           0;
    }                                    union_Response                ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":Object is a complexType.
class ns1__Object
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":ArrayOfStrings is a complexType.
class ns1__ArrayOfStrings
{ public:
/// Vector of std::string with length 0..unbounded
    std::vector<std::string            > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":ArrayOfPipelines is a complexType.
class ns1__ArrayOfPipelines
{ public:
/// Vector of ns1__Pipeline* with length 0..unbounded
    std::vector<ns1__Pipeline*         > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":ArrayOfExecutions is a complexType.
class ns1__ArrayOfExecutions
{ public:
/// Vector of ns1__Execution* with length 0..unbounded
    std::vector<ns1__Execution*        > item                           0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":PipelineParameter is a complexType.
class ns1__PipelineParameter
{ public:
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element type of type "http://france-life-imaging.fr/api":ParameterType.
    enum ns1__ParameterType              type                           1;	///< Required element.
/// Element isOptional of type xs:boolean.
    bool                                 isOptional                     1;	///< Required element.
/// Element isReturnedValue of type xs:boolean.
    bool                                 isReturnedValue                1;	///< Required element.
/// Element defaultValue of type "http://france-life-imaging.fr/api":ParameterTypedValue.
    ns1__ParameterTypedValue*            defaultValue                   0;	///< Optional element.
/// Element description of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":ParameterTypedValue is a complexType.
class ns1__ParameterTypedValue
{ public:
/// Element type of type "http://france-life-imaging.fr/api":ParameterType.
    enum ns1__ParameterType              type                           1;	///< Required element.
/// CHOICE OF ELEMENTS <xs:choice>
   $int                                  __union_ParameterTypedValue   ;	///< Union _ns1__union_ParameterTypedValue selector: set to SOAP_UNION__ns1__union_ParameterTypedValue_<fieldname>
    union _ns1__union_ParameterTypedValue
    {
/// Element valueStr of type xs:string.
    std::string*                         valueStr                       1;	///< Required element.
/// Element valueBool of type xs:boolean.
    bool                                 valueBool                      1;	///< Required element.
/// Element valueInt of type xs:int.
    int                                  valueInt                       1;	///< Required element.
/// Element valueDouble of type xs:double.
    double                               valueDouble                    1;	///< Required element.
    }                                    union_ParameterTypedValue     ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":IntKeyStringValuePair is a complexType.
class ns1__IntKeyStringValuePair
{ public:
/// Element name of type xs:int.
    int                                  name                           1;	///< Required element.
/// Element value of type xs:string.
    std::string                          value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":StringKeyParameterValuePair is a complexType.
class ns1__StringKeyParameterValuePair
{ public:
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element value of type "http://france-life-imaging.fr/api":ParameterTypedValue.
    ns1__ParameterTypedValue*            value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":PipelineKeyBooleanValuePair is a complexType.
class ns1__PipelineKeyBooleanValuePair
{ public:
/// Element name of type "http://france-life-imaging.fr/api":Pipeline.
    ns1__Pipeline*                       name                           1;	///< Required element.
/// Element value of type xs:boolean.
    bool                                 value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":deleteExecution is a complexType.
class ns1__deleteExecution
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// Element deleteFiles of type xs:boolean.
    bool                                 deleteFiles                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":deleteExecutionResponse is a complexType.
class ns1__deleteExecutionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getPipeline is a complexType.
class ns1__getPipeline
{ public:
/// Element pipelineId of type xs:string.
    std::string                          pipelineId                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getPipelineResponse is a complexType.
class ns1__getPipelineResponsef
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":authenticateHTTP is a complexType.
class ns1__authenticateHTTP
{ public:
/// Element userName of type xs:string.
    std::string                          userName                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":authenticateHTTPResponse is a complexType.
class ns1__authenticateHTTPResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":logout is a complexType.
class ns1__logout
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":logoutResponse is a complexType.
class ns1__logoutResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":updateExecution is a complexType.
class ns1__updateExecution
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// Vector of ns1__StringKeyValuePair* with length 1..unbounded
    std::vector<ns1__StringKeyValuePair*> keyValuePair                   1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":StringKeyValuePair is a complexType.
class ns1__StringKeyValuePair
{ public:
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// CHOICE OF ELEMENTS <xs:choice>
   $int                                  __union_StringKeyValuePair    ;	///< Union _ns1__union_StringKeyValuePair selector: set to SOAP_UNION__ns1__union_StringKeyValuePair_<fieldname>
    union _ns1__union_StringKeyValuePair
    {
/// Element valueStr of type xs:string.
    std::string*                         valueStr                       1;	///< Required element.
/// Element valueInt of type xs:int.
    int                                  valueInt                       1;	///< Required element.
/// Element valueStatus of type "http://france-life-imaging.fr/api":ExecutionStatus.
    enum ns1__ExecutionStatus            valueStatus                    1;	///< Required element.
/// Element valueParamType of type "http://france-life-imaging.fr/api":ParameterTypedValue.
    ns1__ParameterTypedValue*            valueParamType                 1;	///< Required element.
    }                                    union_StringKeyValuePair      ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":updateExecutionResponse is a complexType.
class ns1__updateExecutionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getGlobalProperties is a complexType.
class ns1__getGlobalProperties
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getGlobalPropertiesResponse is a complexType.
class ns1__getGlobalPropertiesResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":initExecution is a complexType.
class ns1__initExecution
{ public:
/// Element pipelineId of type xs:string.
    std::string                          pipelineId                     1;	///< Required element.
/// Vector of ns1__StringKeyParameterValuePair* with length 1..unbounded
    std::vector<ns1__StringKeyParameterValuePair*> inputValue                     1;
/// Element timeout of type xs:int.
    int*                                 timeout                        0;	///< Optional element.
/// Element executionName of type xs:string.
    std::string*                         executionName                  0;	///< Optional element.
/// Element studyId of type xs:string.
    std::string*                         studyId                        0;	///< Optional element.
/// Element playExecution of type xs:boolean.
    bool*                                playExecution                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":initExecutionResponse is a complexType.
class ns1__initExecutionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getExecutionResults is a complexType.
class ns1__getExecutionResults
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getExecutionResultsResponse is a complexType.
class ns1__getExecutionResultsResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":killExecution is a complexType.
class ns1__killExecution
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getStdOut is a complexType.
class ns1__getStdOut
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getStdOutResponse is a complexType.
class ns1__getStdOutResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getStdErr is a complexType.
class ns1__getStdErr
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getStdErrResponse is a complexType.
class ns1__getStdErrResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":killExecutionResponse is a complexType.
class ns1__killExecutionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getExecution is a complexType.
class ns1__getExecution
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":getExecutionResponse is a complexType.
class ns1__getExecutionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":playExecution is a complexType.
class ns1__playExecution
{ public:
/// Element executionId of type xs:string.
    std::string                          executionId                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":playExecutionResponse is a complexType.
class ns1__playExecutionResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":listPipelines is a complexType.
class ns1__listPipelines
{ public:
/// Element studyIdentifier of type xs:string.
    std::string                          studyIdentifier                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":listPipelinesResponse is a complexType.
class ns1__listPipelinesResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":listExecutions is a complexType.
class ns1__listExecutions
{ public:
/// Element studyIdentifier of type xs:string.
    std::string                          studyIdentifier                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":listExecutionsResponse is a complexType.
class ns1__listExecutionsResponse
{ public:
/// Element return of type "http://france-life-imaging.fr/api":Response.
    ns1__Response*                       return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://france-life-imaging.fr/api":Pipeline is a complexType with complexContent extension of "http://france-life-imaging.fr/api":Object.
class ns1__Pipeline : public ns1__Object
{ public:
/*  INHERITED FROM ns1__Object:
    END OF INHERITED */
/// Element identifier of type xs:string.
    std::string                          identifier                     1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element description of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// Element version of type xs:string.
    std::string                          version                        1;	///< Required element.
/// Vector of ns1__PipelineParameter* with length 0..unbounded
    std::vector<ns1__PipelineParameter*> parameters                     0;
/// Vector of ns1__IntKeyStringValuePair* with length 0..unbounded
    std::vector<ns1__IntKeyStringValuePair*> errorCodesAndMessages          0;
/// Element canExecute of type xs:boolean.
    bool*                                canExecute                     0;	///< Optional element.
};

/// "http://france-life-imaging.fr/api":Execution is a complexType with complexContent extension of "http://france-life-imaging.fr/api":Object.
class ns1__Execution : public ns1__Object
{ public:
/*  INHERITED FROM ns1__Object:
    END OF INHERITED */
/// Element identifier of type xs:string.
    std::string                          identifier                     1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element pipelineIdentifier of type xs:string.
    std::string                          pipelineIdentifier             1;	///< Required element.
/// Element timeout of type xs:int.
    int*                                 timeout                        0;	///< Optional element.
/// Element status of type "http://france-life-imaging.fr/api":ExecutionStatus.
    enum ns1__ExecutionStatus            status                         1;	///< Required element.
/// Vector of ns1__StringKeyParameterValuePair* with length 0..unbounded
    std::vector<ns1__StringKeyParameterValuePair*> inputValue                     0;
/// Vector of ns1__StringKeyParameterValuePair* with length 0..unbounded
    std::vector<ns1__StringKeyParameterValuePair*> returnedFile                   0;
/// Element studyIdentifier of type xs:string.
    std::string*                         studyIdentifier                0;	///< Optional element.
/// Element errorCode of type xs:int.
    int*                                 errorCode                      0;	///< Optional element.
/// Element startDate of type xs:long.
    LONG64*                              startDate                      0;	///< Optional element.
/// Element endDate of type xs:long.
    LONG64*                              endDate                        0;	///< Optional element.
};

/// "http://france-life-imaging.fr/api":GlobalProperties is a complexType with complexContent extension of "http://france-life-imaging.fr/api":Object.
class ns1__GlobalProperties : public ns1__Object
{ public:
/*  INHERITED FROM ns1__Object:
    END OF INHERITED */
/// Vector of ns1__IntKeyStringValuePair* with length 0..unbounded
    std::vector<ns1__IntKeyStringValuePair*> APIErrorCodesAndMessages       0;
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > supportedTransferProtocol      1;
/// Vector of enum ns1__Module with length 1..unbounded
    std::vector<enum ns1__Module       > supportedModule                1;
/// Element email of type xs:string.
    std::string*                         email                          0;	///< Optional element.
/// Element platformDescription of type xs:string.
    std::string*                         platformDescription            0;	///< Optional element.
/// Element minAuthorizedExecutionTimeout of type xs:int.
    int*                                 minAuthorizedExecutionTimeout  0;	///< Optional element.
/// Element maxAuthorizedExecutionTimeout of type xs:int.
    int*                                 maxAuthorizedExecutionTimeout  0;	///< Optional element.
/// Element defaultExecutionTimeout of type xs:int.
    int*                                 defaultExecutionTimeout        0;	///< Optional element.
/// Element isKillExecutionSupported of type xs:boolean.
    bool                                 isKillExecutionSupported       1;	///< Required element.
/// Element defaultStudy of type xs:string.
    std::string*                         defaultStudy                   0;	///< Optional element.
/// Element supportedAPIVersion of type xs:string.
    std::string                          supportedAPIVersion            1;	///< Required element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://france-life-imaging.fr/api                                        *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://france-life-imaging.fr/api":authenticateHTTP of type "http://france-life-imaging.fr/api":authenticateHTTP.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":authenticateHTTPResponse of type "http://france-life-imaging.fr/api":authenticateHTTPResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":authenticateSession of type "http://france-life-imaging.fr/api":authenticateSession.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":authenticateSessionResponse of type "http://france-life-imaging.fr/api":authenticateSessionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":deleteExecution of type "http://france-life-imaging.fr/api":deleteExecution.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":deleteExecutionResponse of type "http://france-life-imaging.fr/api":deleteExecutionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getExecution of type "http://france-life-imaging.fr/api":getExecution.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getExecutionResponse of type "http://france-life-imaging.fr/api":getExecutionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getExecutionResults of type "http://france-life-imaging.fr/api":getExecutionResults.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getExecutionResultsResponse of type "http://france-life-imaging.fr/api":getExecutionResultsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getGlobalProperties of type "http://france-life-imaging.fr/api":getGlobalProperties.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getGlobalPropertiesResponse of type "http://france-life-imaging.fr/api":getGlobalPropertiesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getPipeline of type "http://france-life-imaging.fr/api":getPipeline.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getPipelineResponse of type "http://france-life-imaging.fr/api":getPipelineResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":initExecution of type "http://france-life-imaging.fr/api":initExecution.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":initExecutionResponse of type "http://france-life-imaging.fr/api":initExecutionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getStdOut of type "http://france-life-imaging.fr/api":getStdOut.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getStdOutResponse of type "http://france-life-imaging.fr/api":getStdOutResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getStdErr of type "http://france-life-imaging.fr/api":getStdErr.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":getStdErrResponse of type "http://france-life-imaging.fr/api":getStdErrResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":killExecution of type "http://france-life-imaging.fr/api":killExecution.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":killExecutionResponse of type "http://france-life-imaging.fr/api":killExecutionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":listExecutions of type "http://france-life-imaging.fr/api":listExecutions.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":listExecutionsResponse of type "http://france-life-imaging.fr/api":listExecutionsResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":listPipelines of type "http://france-life-imaging.fr/api":listPipelines.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":listPipelinesResponse of type "http://france-life-imaging.fr/api":listPipelinesResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":logout of type "http://france-life-imaging.fr/api":logout.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":logoutResponse of type "http://france-life-imaging.fr/api":logoutResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":playExecution of type "http://france-life-imaging.fr/api":playExecution.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":playExecutionResponse of type "http://france-life-imaging.fr/api":playExecutionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":updateExecution of type "http://france-life-imaging.fr/api":updateExecution.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://france-life-imaging.fr/api":updateExecutionResponse of type "http://france-life-imaging.fr/api":updateExecutionResponse.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://france-life-imaging.fr/api                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	CarminSoapBinding 
//gsoap ns1  service type:	Carmin 
//gsoap ns1  service port:	http://localhost/api 
//gsoap ns1  service namespace:	http://france-life-imaging.fr/api 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Carmin Definitions

@section Carmin_bindings Service Bindings

  - @ref CarminSoapBinding

@section Carmin_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page CarminSoapBinding Binding "CarminSoapBinding"

@section CarminSoapBinding_operations Operations of Binding  "CarminSoapBinding"

  - @ref __ns1__authenticateSession

  - @ref __ns1__deleteExecution

  - @ref __ns1__getPipeline

  - @ref __ns1__authenticateHTTP

  - @ref __ns1__logout

  - @ref __ns1__updateExecution

  - @ref __ns1__getGlobalProperties

  - @ref __ns1__initExecution

  - @ref __ns1__getStdOut

  - @ref __ns1__getStdErr

  - @ref __ns1__getExecutionResults

  - @ref __ns1__killExecution

  - @ref __ns1__getExecution

  - @ref __ns1__playExecution

  - @ref __ns1__listPipelines

  - @ref __ns1__listExecutions

@section CarminSoapBinding_ports Endpoints of Binding  "CarminSoapBinding"

  - http://localhost/api

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CarminSoapBinding                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__authenticateSession                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__authenticateSession" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__authenticateSession(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__authenticateSession*           ns1__authenticateSession_,
    // response parameters:
    ns1__authenticateSessionResponse*   ns1__authenticateSessionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__authenticateSession(
    struct soap *soap,
    // request parameters:
    ns1__authenticateSession*           ns1__authenticateSession_,
    // response parameters:
    ns1__authenticateSessionResponse*   ns1__authenticateSessionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	authenticateSession document
//gsoap ns1  service method-encoding:	authenticateSession literal
//gsoap ns1  service method-action:	authenticateSession ""
int __ns1__authenticateSession(
    ns1__authenticateSession*           ns1__authenticateSession_,	///< Request parameter
    ns1__authenticateSessionResponse*   ns1__authenticateSessionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteExecution                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__deleteExecution" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteExecution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__deleteExecution*               ns1__deleteExecution_,
    // response parameters:
    ns1__deleteExecutionResponse*       ns1__deleteExecutionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteExecution(
    struct soap *soap,
    // request parameters:
    ns1__deleteExecution*               ns1__deleteExecution_,
    // response parameters:
    ns1__deleteExecutionResponse*       ns1__deleteExecutionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	deleteExecution document
//gsoap ns1  service method-encoding:	deleteExecution literal
//gsoap ns1  service method-action:	deleteExecution ""
int __ns1__deleteExecution(
    ns1__deleteExecution*               ns1__deleteExecution_,	///< Request parameter
    ns1__deleteExecutionResponse*       ns1__deleteExecutionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getPipeline                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getPipeline" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getPipeline(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getPipeline*                   ns1__getPipeline_,
    // response parameters:
    ns1__getPipelineResponse*           ns1__getPipelineResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getPipeline(
    struct soap *soap,
    // request parameters:
    ns1__getPipeline*                   ns1__getPipeline_,
    // response parameters:
    ns1__getPipelineResponse*           ns1__getPipelineResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getPipeline document
//gsoap ns1  service method-encoding:	getPipeline literal
//gsoap ns1  service method-action:	getPipeline ""
int __ns1__getPipeline(
    ns1__getPipeline*                   ns1__getPipeline_,	///< Request parameter
    ns1__getPipelineResponse*           ns1__getPipelineResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__authenticateHTTP                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__authenticateHTTP" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__authenticateHTTP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__authenticateHTTP*              ns1__authenticateHTTP_,
    // response parameters:
    ns1__authenticateHTTPResponse*      ns1__authenticateHTTPResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__authenticateHTTP(
    struct soap *soap,
    // request parameters:
    ns1__authenticateHTTP*              ns1__authenticateHTTP_,
    // response parameters:
    ns1__authenticateHTTPResponse*      ns1__authenticateHTTPResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	authenticateHTTP document
//gsoap ns1  service method-encoding:	authenticateHTTP literal
//gsoap ns1  service method-action:	authenticateHTTP ""
int __ns1__authenticateHTTP(
    ns1__authenticateHTTP*              ns1__authenticateHTTP_,	///< Request parameter
    ns1__authenticateHTTPResponse*      ns1__authenticateHTTPResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__logout                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__logout" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__logout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__logout*                        ns1__logout_,
    // response parameters:
    ns1__logoutResponse*                ns1__logoutResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__logout(
    struct soap *soap,
    // request parameters:
    ns1__logout*                        ns1__logout_,
    // response parameters:
    ns1__logoutResponse*                ns1__logoutResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	logout document
//gsoap ns1  service method-encoding:	logout literal
//gsoap ns1  service method-action:	logout ""
int __ns1__logout(
    ns1__logout*                        ns1__logout_,	///< Request parameter
    ns1__logoutResponse*                ns1__logoutResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__updateExecution                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__updateExecution" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__updateExecution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__updateExecution*               ns1__updateExecution_,
    // response parameters:
    ns1__updateExecutionResponse*       ns1__updateExecutionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__updateExecution(
    struct soap *soap,
    // request parameters:
    ns1__updateExecution*               ns1__updateExecution_,
    // response parameters:
    ns1__updateExecutionResponse*       ns1__updateExecutionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	updateExecution document
//gsoap ns1  service method-encoding:	updateExecution literal
//gsoap ns1  service method-action:	updateExecution ""
int __ns1__updateExecution(
    ns1__updateExecution*               ns1__updateExecution_,	///< Request parameter
    ns1__updateExecutionResponse*       ns1__updateExecutionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getGlobalProperties                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getGlobalProperties" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getGlobalProperties(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getGlobalProperties*           ns1__getGlobalProperties_,
    // response parameters:
    ns1__getGlobalPropertiesResponse*   ns1__getGlobalPropertiesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getGlobalProperties(
    struct soap *soap,
    // request parameters:
    ns1__getGlobalProperties*           ns1__getGlobalProperties_,
    // response parameters:
    ns1__getGlobalPropertiesResponse*   ns1__getGlobalPropertiesResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getGlobalProperties document
//gsoap ns1  service method-encoding:	getGlobalProperties literal
//gsoap ns1  service method-action:	getGlobalProperties ""
int __ns1__getGlobalProperties(
    ns1__getGlobalProperties*           ns1__getGlobalProperties_,	///< Request parameter
    ns1__getGlobalPropertiesResponse*   ns1__getGlobalPropertiesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__initExecution                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__initExecution" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__initExecution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__initExecution*                 ns1__initExecution_,
    // response parameters:
    ns1__initExecutionResponse*         ns1__initExecutionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__initExecution(
    struct soap *soap,
    // request parameters:
    ns1__initExecution*                 ns1__initExecution_,
    // response parameters:
    ns1__initExecutionResponse*         ns1__initExecutionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	initExecution document
//gsoap ns1  service method-encoding:	initExecution literal
//gsoap ns1  service method-action:	initExecution ""
int __ns1__initExecution(
    ns1__initExecution*                 ns1__initExecution_,	///< Request parameter
    ns1__initExecutionResponse*         ns1__initExecutionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getStdOut                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getStdOut" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getStdOut(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getStdOut*                     ns1__getStdOut_,
    // response parameters:
    ns1__getStdOutResponse*             ns1__getStdOutResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getStdOut(
    struct soap *soap,
    // request parameters:
    ns1__getStdOut*                     ns1__getStdOut_,
    // response parameters:
    ns1__getStdOutResponse*             ns1__getStdOutResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getStdOut document
//gsoap ns1  service method-encoding:	getStdOut literal
//gsoap ns1  service method-action:	getStdOut ""
int __ns1__getStdOut(
    ns1__getStdOut*                     ns1__getStdOut_,	///< Request parameter
    ns1__getStdOutResponse*             ns1__getStdOutResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getStdErr                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getStdErr" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getStdErr(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getStdErr*                     ns1__getStdErr_,
    // response parameters:
    ns1__getStdErrResponse*             ns1__getStdErrResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getStdErr(
    struct soap *soap,
    // request parameters:
    ns1__getStdErr*                     ns1__getStdErr_,
    // response parameters:
    ns1__getStdErrResponse*             ns1__getStdErrResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getStdErr document
//gsoap ns1  service method-encoding:	getStdErr literal
//gsoap ns1  service method-action:	getStdErr ""
int __ns1__getStdErr(
    ns1__getStdErr*                     ns1__getStdErr_,	///< Request parameter
    ns1__getStdErrResponse*             ns1__getStdErrResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getExecutionResults                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getExecutionResults" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getExecutionResults(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getExecutionResults*           ns1__getExecutionResults_,
    // response parameters:
    ns1__getExecutionResultsResponse*   ns1__getExecutionResultsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getExecutionResults(
    struct soap *soap,
    // request parameters:
    ns1__getExecutionResults*           ns1__getExecutionResults_,
    // response parameters:
    ns1__getExecutionResultsResponse*   ns1__getExecutionResultsResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getExecutionResults document
//gsoap ns1  service method-encoding:	getExecutionResults literal
//gsoap ns1  service method-action:	getExecutionResults ""
int __ns1__getExecutionResults(
    ns1__getExecutionResults*           ns1__getExecutionResults_,	///< Request parameter
    ns1__getExecutionResultsResponse*   ns1__getExecutionResultsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__killExecution                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__killExecution" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__killExecution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__killExecution*                 ns1__killExecution_,
    // response parameters:
    ns1__killExecutionResponse*         ns1__killExecutionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__killExecution(
    struct soap *soap,
    // request parameters:
    ns1__killExecution*                 ns1__killExecution_,
    // response parameters:
    ns1__killExecutionResponse*         ns1__killExecutionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	killExecution document
//gsoap ns1  service method-encoding:	killExecution literal
//gsoap ns1  service method-action:	killExecution ""
int __ns1__killExecution(
    ns1__killExecution*                 ns1__killExecution_,	///< Request parameter
    ns1__killExecutionResponse*         ns1__killExecutionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getExecution                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__getExecution" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getExecution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__getExecution*                  ns1__getExecution_,
    // response parameters:
    ns1__getExecutionResponse*          ns1__getExecutionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getExecution(
    struct soap *soap,
    // request parameters:
    ns1__getExecution*                  ns1__getExecution_,
    // response parameters:
    ns1__getExecutionResponse*          ns1__getExecutionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	getExecution document
//gsoap ns1  service method-encoding:	getExecution literal
//gsoap ns1  service method-action:	getExecution ""
int __ns1__getExecution(
    ns1__getExecution*                  ns1__getExecution_,	///< Request parameter
    ns1__getExecutionResponse*          ns1__getExecutionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__playExecution                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__playExecution" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__playExecution(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__playExecution*                 ns1__playExecution_,
    // response parameters:
    ns1__playExecutionResponse*         ns1__playExecutionResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__playExecution(
    struct soap *soap,
    // request parameters:
    ns1__playExecution*                 ns1__playExecution_,
    // response parameters:
    ns1__playExecutionResponse*         ns1__playExecutionResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	playExecution document
//gsoap ns1  service method-encoding:	playExecution literal
//gsoap ns1  service method-action:	playExecution ""
int __ns1__playExecution(
    ns1__playExecution*                 ns1__playExecution_,	///< Request parameter
    ns1__playExecutionResponse*         ns1__playExecutionResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__listPipelines                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__listPipelines" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__listPipelines(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__listPipelines*                 ns1__listPipelines_,
    // response parameters:
    ns1__listPipelinesResponse*         ns1__listPipelinesResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__listPipelines(
    struct soap *soap,
    // request parameters:
    ns1__listPipelines*                 ns1__listPipelines_,
    // response parameters:
    ns1__listPipelinesResponse*         ns1__listPipelinesResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	listPipelines document
//gsoap ns1  service method-encoding:	listPipelines literal
//gsoap ns1  service method-action:	listPipelines ""
int __ns1__listPipelines(
    ns1__listPipelines*                 ns1__listPipelines_,	///< Request parameter
    ns1__listPipelinesResponse*         ns1__listPipelinesResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__listExecutions                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__listExecutions" of service binding "CarminSoapBinding"

/**

Operation details:


  - SOAP document/literal style messaging

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__listExecutions(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__listExecutions*                ns1__listExecutions_,
    // response parameters:
    ns1__listExecutionsResponse*        ns1__listExecutionsResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__listExecutions(
    struct soap *soap,
    // request parameters:
    ns1__listExecutions*                ns1__listExecutions_,
    // response parameters:
    ns1__listExecutionsResponse*        ns1__listExecutionsResponse_
  );
@endcode

C++ proxy class (defined in soapCarminSoapBindingProxy.h):
@code
  class CarminSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapCarminSoapBindingService.h):
@code
  class CarminSoapBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	listExecutions document
//gsoap ns1  service method-encoding:	listExecutions literal
//gsoap ns1  service method-action:	listExecutions ""
int __ns1__listExecutions(
    ns1__listExecutions*                ns1__listExecutions_,	///< Request parameter
    ns1__listExecutionsResponse*        ns1__listExecutionsResponse_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://france-life-imaging.fr/api"

  - <ns1:authenticateHTTP> (use wsdl2h option -g to auto-generate)

  - <ns1:authenticateHTTPResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:authenticateSession> (use wsdl2h option -g to auto-generate)

  - <ns1:authenticateSessionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:deleteExecution> (use wsdl2h option -g to auto-generate)

  - <ns1:deleteExecutionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getExecution> (use wsdl2h option -g to auto-generate)

  - <ns1:getExecutionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getExecutionResults> (use wsdl2h option -g to auto-generate)

  - <ns1:getExecutionResultsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getGlobalProperties> (use wsdl2h option -g to auto-generate)

  - <ns1:getGlobalPropertiesResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getPipeline> (use wsdl2h option -g to auto-generate)

  - <ns1:getPipelineResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:initExecution> (use wsdl2h option -g to auto-generate)

  - <ns1:initExecutionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getStdOut> (use wsdl2h option -g to auto-generate)

  - <ns1:getStdOutResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:getStdErr> (use wsdl2h option -g to auto-generate)

  - <ns1:getStdErrResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:killExecution> (use wsdl2h option -g to auto-generate)

  - <ns1:killExecutionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:listExecutions> (use wsdl2h option -g to auto-generate)

  - <ns1:listExecutionsResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:listPipelines> (use wsdl2h option -g to auto-generate)

  - <ns1:listPipelinesResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:logout> (use wsdl2h option -g to auto-generate)

  - <ns1:logoutResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:playExecution> (use wsdl2h option -g to auto-generate)

  - <ns1:playExecutionResponse> (use wsdl2h option -g to auto-generate)

  - <ns1:updateExecution> (use wsdl2h option -g to auto-generate)

  - <ns1:updateExecutionResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of api.h */
