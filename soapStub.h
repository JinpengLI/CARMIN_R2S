/* soapStub.h
   Generated by gSOAP 2.7.17 from api.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_api	"http://france-life-imaging.fr/api"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_api__ParameterType
#define SOAP_TYPE_api__ParameterType (54)
/* api:ParameterType */
enum api__ParameterType {api__ParameterType__File = 0, api__ParameterType__String = 1, api__ParameterType__Boolean = 2, api__ParameterType__Int64 = 3, api__ParameterType__Double = 4, api__ParameterType__List = 5};
#endif

#ifndef SOAP_TYPE_api__ExecutionStatus
#define SOAP_TYPE_api__ExecutionStatus (55)
/* api:ExecutionStatus */
enum api__ExecutionStatus {api__ExecutionStatus__Initializing = 0, api__ExecutionStatus__Ready = 1, api__ExecutionStatus__Running = 2, api__ExecutionStatus__Finished = 3, api__ExecutionStatus__InitializationFailed = 4, api__ExecutionStatus__ExecutionFailed = 5, api__ExecutionStatus__Unknown = 6, api__ExecutionStatus__Killed = 7};
#endif

#ifndef SOAP_TYPE_api__Module
#define SOAP_TYPE_api__Module (56)
/* api:Module */
enum api__Module {api__Module__Processing = 0, api__Module__Data = 1, api__Module__Management = 2, api__Module__Commercial = 3};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_api__authenticateSession
#define SOAP_TYPE_api__authenticateSession (8)
/* api:authenticateSession */
class SOAP_CMAC api__authenticateSession
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_api__authenticateSession */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__authenticateSession(): soap(NULL) { api__authenticateSession::soap_default(NULL); }
	virtual ~api__authenticateSession() { }
};
#endif

#ifndef SOAP_TYPE_api__authenticateSessionResponse
#define SOAP_TYPE_api__authenticateSessionResponse (9)
/* api:authenticateSessionResponse */
class SOAP_CMAC api__authenticateSessionResponse
{
public:
	class api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_api__authenticateSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__authenticateSessionResponse(): return_(NULL), soap(NULL) { api__authenticateSessionResponse::soap_default(NULL); }
	virtual ~api__authenticateSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE__api__union_Response
#define SOAP_TYPE__api__union_Response (81)
/* xsd:choice */
union _api__union_Response
{
#define SOAP_UNION__api__union_Response_returnedValuePipeline	(1)
	std::vector<class api__Pipeline * >*returnedValuePipeline;
#define SOAP_UNION__api__union_Response_returnedValueExecution	(2)
	class api__Execution *returnedValueExecution;
#define SOAP_UNION__api__union_Response_returnedValueGlobalProp	(3)
	class api__GlobalProperties *returnedValueGlobalProp;
#define SOAP_UNION__api__union_Response_returnedValueStr	(4)
	std::vector<std::string >*returnedValueStr;
#define SOAP_UNION__api__union_Response_returnedValueListStrings	(5)
	std::vector<class api__ArrayOfStrings * >*returnedValueListStrings;
#define SOAP_UNION__api__union_Response_returnedValueListExecutions	(6)
	std::vector<class api__ArrayOfExecutions * >*returnedValueListExecutions;
#define SOAP_UNION__api__union_Response_returnedValueListPipelines	(7)
	std::vector<class api__ArrayOfPipelines * >*returnedValueListPipelines;
#define SOAP_UNION__api__union_Response_returnedValueStatus	(8)
	enum api__ExecutionStatus *returnedValueStatus;
#define SOAP_UNION__api__union_Response_returnedValuePairKey	(9)
	std::vector<class api__PipelineKeyBooleanValuePair * >*returnedValuePairKey;
};
#endif

#ifndef SOAP_TYPE_api__Response
#define SOAP_TYPE_api__Response (10)
/* api:Response */
class SOAP_CMAC api__Response
{
public:
	int statusCode;	/* required element of type xsd:int */
	std::string *errorMessage;	/* optional element of type xsd:string */
	int __union_Response;	/* union discriminant (of union defined below) */
	union _api__union_Response union_Response;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_api__Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__Response(): errorMessage(NULL), soap(NULL) { api__Response::soap_default(NULL); }
	virtual ~api__Response() { }
};
#endif

#ifndef SOAP_TYPE_api__Object
#define SOAP_TYPE_api__Object (12)
/* api:Object */
class SOAP_CMAC api__Object
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_api__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__Object(): soap(NULL) { api__Object::soap_default(NULL); }
	virtual ~api__Object() { }
};
#endif

#ifndef SOAP_TYPE_api__ArrayOfStrings
#define SOAP_TYPE_api__ArrayOfStrings (13)
/* api:ArrayOfStrings */
class SOAP_CMAC api__ArrayOfStrings
{
public:
	std::vector<std::string >item;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_api__ArrayOfStrings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__ArrayOfStrings(): soap(NULL) { api__ArrayOfStrings::soap_default(NULL); }
	virtual ~api__ArrayOfStrings() { }
};
#endif

#ifndef SOAP_TYPE_api__ArrayOfPipelines
#define SOAP_TYPE_api__ArrayOfPipelines (14)
/* api:ArrayOfPipelines */
class SOAP_CMAC api__ArrayOfPipelines
{
public:
	std::vector<api__Pipeline * >item;	/* optional element of type api:Pipeline */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_api__ArrayOfPipelines */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__ArrayOfPipelines(): soap(NULL) { api__ArrayOfPipelines::soap_default(NULL); }
	virtual ~api__ArrayOfPipelines() { }
};
#endif

#ifndef SOAP_TYPE_api__ArrayOfExecutions
#define SOAP_TYPE_api__ArrayOfExecutions (15)
/* api:ArrayOfExecutions */
class SOAP_CMAC api__ArrayOfExecutions
{
public:
	std::vector<api__Execution * >item;	/* optional element of type api:Execution */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_api__ArrayOfExecutions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__ArrayOfExecutions(): soap(NULL) { api__ArrayOfExecutions::soap_default(NULL); }
	virtual ~api__ArrayOfExecutions() { }
};
#endif

#ifndef SOAP_TYPE_api__PipelineParameter
#define SOAP_TYPE_api__PipelineParameter (16)
/* api:PipelineParameter */
class SOAP_CMAC api__PipelineParameter
{
public:
	std::string name;	/* required element of type xsd:string */
	enum api__ParameterType type;	/* required element of type api:ParameterType */
	bool isOptional;	/* required element of type xsd:boolean */
	bool isReturnedValue;	/* required element of type xsd:boolean */
	class api__ParameterTypedValue *defaultValue;	/* optional element of type api:ParameterTypedValue */
	std::string *description;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_api__PipelineParameter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__PipelineParameter(): defaultValue(NULL), description(NULL), soap(NULL) { api__PipelineParameter::soap_default(NULL); }
	virtual ~api__PipelineParameter() { }
};
#endif

#ifndef SOAP_TYPE__api__union_ParameterTypedValue
#define SOAP_TYPE__api__union_ParameterTypedValue (86)
/* xsd:choice */
union _api__union_ParameterTypedValue
{
#define SOAP_UNION__api__union_ParameterTypedValue_valueStr	(1)
	std::string *valueStr;
#define SOAP_UNION__api__union_ParameterTypedValue_valueBool	(2)
	bool valueBool;
#define SOAP_UNION__api__union_ParameterTypedValue_valueInt	(3)
	int valueInt;
#define SOAP_UNION__api__union_ParameterTypedValue_valueDouble	(4)
	double valueDouble;
};
#endif

#ifndef SOAP_TYPE_api__ParameterTypedValue
#define SOAP_TYPE_api__ParameterTypedValue (17)
/* api:ParameterTypedValue */
class SOAP_CMAC api__ParameterTypedValue
{
public:
	enum api__ParameterType type;	/* required element of type api:ParameterType */
	int __union_ParameterTypedValue;	/* union discriminant (of union defined below) */
	union _api__union_ParameterTypedValue union_ParameterTypedValue;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_api__ParameterTypedValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__ParameterTypedValue(): soap(NULL) { api__ParameterTypedValue::soap_default(NULL); }
	virtual ~api__ParameterTypedValue() { }
};
#endif

#ifndef SOAP_TYPE_api__IntKeyStringValuePair
#define SOAP_TYPE_api__IntKeyStringValuePair (18)
/* api:IntKeyStringValuePair */
class SOAP_CMAC api__IntKeyStringValuePair
{
public:
	int name;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_api__IntKeyStringValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__IntKeyStringValuePair(): soap(NULL) { api__IntKeyStringValuePair::soap_default(NULL); }
	virtual ~api__IntKeyStringValuePair() { }
};
#endif

#ifndef SOAP_TYPE_api__StringKeyParameterValuePair
#define SOAP_TYPE_api__StringKeyParameterValuePair (20)
/* api:StringKeyParameterValuePair */
class SOAP_CMAC api__StringKeyParameterValuePair
{
public:
	std::string name;	/* required element of type xsd:string */
	api__ParameterTypedValue *value;	/* required element of type api:ParameterTypedValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_api__StringKeyParameterValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__StringKeyParameterValuePair(): value(NULL), soap(NULL) { api__StringKeyParameterValuePair::soap_default(NULL); }
	virtual ~api__StringKeyParameterValuePair() { }
};
#endif

#ifndef SOAP_TYPE_api__PipelineKeyBooleanValuePair
#define SOAP_TYPE_api__PipelineKeyBooleanValuePair (22)
/* api:PipelineKeyBooleanValuePair */
class SOAP_CMAC api__PipelineKeyBooleanValuePair
{
public:
	api__Pipeline *name;	/* required element of type api:Pipeline */
	bool value;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_api__PipelineKeyBooleanValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__PipelineKeyBooleanValuePair(): name(NULL), soap(NULL) { api__PipelineKeyBooleanValuePair::soap_default(NULL); }
	virtual ~api__PipelineKeyBooleanValuePair() { }
};
#endif

#ifndef SOAP_TYPE_api__deleteExecution
#define SOAP_TYPE_api__deleteExecution (23)
/* api:deleteExecution */
class SOAP_CMAC api__deleteExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	bool deleteFiles;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_api__deleteExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__deleteExecution(): soap(NULL) { api__deleteExecution::soap_default(NULL); }
	virtual ~api__deleteExecution() { }
};
#endif

#ifndef SOAP_TYPE_api__deleteExecutionResponse
#define SOAP_TYPE_api__deleteExecutionResponse (24)
/* api:deleteExecutionResponse */
class SOAP_CMAC api__deleteExecutionResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_api__deleteExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__deleteExecutionResponse(): return_(NULL), soap(NULL) { api__deleteExecutionResponse::soap_default(NULL); }
	virtual ~api__deleteExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__getPipeline
#define SOAP_TYPE_api__getPipeline (25)
/* api:getPipeline */
class SOAP_CMAC api__getPipeline
{
public:
	std::string pipelineId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_api__getPipeline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getPipeline(): soap(NULL) { api__getPipeline::soap_default(NULL); }
	virtual ~api__getPipeline() { }
};
#endif

#ifndef SOAP_TYPE_api__getPipelineResponse
#define SOAP_TYPE_api__getPipelineResponse (26)
/* api:getPipelineResponse */
class SOAP_CMAC api__getPipelineResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_api__getPipelineResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getPipelineResponse(): return_(NULL), soap(NULL) { api__getPipelineResponse::soap_default(NULL); }
	virtual ~api__getPipelineResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__authenticateHTTP
#define SOAP_TYPE_api__authenticateHTTP (27)
/* api:authenticateHTTP */
class SOAP_CMAC api__authenticateHTTP
{
public:
	std::string userName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_api__authenticateHTTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__authenticateHTTP(): soap(NULL) { api__authenticateHTTP::soap_default(NULL); }
	virtual ~api__authenticateHTTP() { }
};
#endif

#ifndef SOAP_TYPE_api__authenticateHTTPResponse
#define SOAP_TYPE_api__authenticateHTTPResponse (28)
/* api:authenticateHTTPResponse */
class SOAP_CMAC api__authenticateHTTPResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_api__authenticateHTTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__authenticateHTTPResponse(): return_(NULL), soap(NULL) { api__authenticateHTTPResponse::soap_default(NULL); }
	virtual ~api__authenticateHTTPResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__logout
#define SOAP_TYPE_api__logout (29)
/* api:logout */
class SOAP_CMAC api__logout
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_api__logout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__logout(): soap(NULL) { api__logout::soap_default(NULL); }
	virtual ~api__logout() { }
};
#endif

#ifndef SOAP_TYPE_api__logoutResponse
#define SOAP_TYPE_api__logoutResponse (30)
/* api:logoutResponse */
class SOAP_CMAC api__logoutResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_api__logoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__logoutResponse(): return_(NULL), soap(NULL) { api__logoutResponse::soap_default(NULL); }
	virtual ~api__logoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__updateExecution
#define SOAP_TYPE_api__updateExecution (31)
/* api:updateExecution */
class SOAP_CMAC api__updateExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	std::vector<class api__StringKeyValuePair * >keyValuePair;	/* required element of type api:StringKeyValuePair */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_api__updateExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__updateExecution(): soap(NULL) { api__updateExecution::soap_default(NULL); }
	virtual ~api__updateExecution() { }
};
#endif

#ifndef SOAP_TYPE__api__union_StringKeyValuePair
#define SOAP_TYPE__api__union_StringKeyValuePair (89)
/* xsd:choice */
union _api__union_StringKeyValuePair
{
#define SOAP_UNION__api__union_StringKeyValuePair_valueStr	(1)
	std::string *valueStr;
#define SOAP_UNION__api__union_StringKeyValuePair_valueInt	(2)
	int valueInt;
#define SOAP_UNION__api__union_StringKeyValuePair_valueStatus	(3)
	enum api__ExecutionStatus valueStatus;
#define SOAP_UNION__api__union_StringKeyValuePair_valueParamType	(4)
	api__ParameterTypedValue *valueParamType;
};
#endif

#ifndef SOAP_TYPE_api__StringKeyValuePair
#define SOAP_TYPE_api__StringKeyValuePair (32)
/* api:StringKeyValuePair */
class SOAP_CMAC api__StringKeyValuePair
{
public:
	std::string name;	/* required element of type xsd:string */
	int __union_StringKeyValuePair;	/* union discriminant (of union defined below) */
	union _api__union_StringKeyValuePair union_StringKeyValuePair;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_api__StringKeyValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__StringKeyValuePair(): soap(NULL) { api__StringKeyValuePair::soap_default(NULL); }
	virtual ~api__StringKeyValuePair() { }
};
#endif

#ifndef SOAP_TYPE_api__updateExecutionResponse
#define SOAP_TYPE_api__updateExecutionResponse (33)
/* api:updateExecutionResponse */
class SOAP_CMAC api__updateExecutionResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_api__updateExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__updateExecutionResponse(): return_(NULL), soap(NULL) { api__updateExecutionResponse::soap_default(NULL); }
	virtual ~api__updateExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__getGlobalProperties
#define SOAP_TYPE_api__getGlobalProperties (34)
/* api:getGlobalProperties */
class SOAP_CMAC api__getGlobalProperties
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_api__getGlobalProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getGlobalProperties(): soap(NULL) { api__getGlobalProperties::soap_default(NULL); }
	virtual ~api__getGlobalProperties() { }
};
#endif

#ifndef SOAP_TYPE_api__getGlobalPropertiesResponse
#define SOAP_TYPE_api__getGlobalPropertiesResponse (35)
/* api:getGlobalPropertiesResponse */
class SOAP_CMAC api__getGlobalPropertiesResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_api__getGlobalPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getGlobalPropertiesResponse(): return_(NULL), soap(NULL) { api__getGlobalPropertiesResponse::soap_default(NULL); }
	virtual ~api__getGlobalPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__initExecution
#define SOAP_TYPE_api__initExecution (36)
/* api:initExecution */
class SOAP_CMAC api__initExecution
{
public:
	std::string pipelineId;	/* required element of type xsd:string */
	std::vector<api__StringKeyParameterValuePair * >inputValue;	/* required element of type api:StringKeyParameterValuePair */
	int *timeout;	/* optional element of type xsd:int */
	std::string *executionName;	/* optional element of type xsd:string */
	std::string *studyId;	/* optional element of type xsd:string */
	bool *playExecution;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_api__initExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__initExecution(): timeout(NULL), executionName(NULL), studyId(NULL), playExecution(NULL), soap(NULL) { api__initExecution::soap_default(NULL); }
	virtual ~api__initExecution() { }
};
#endif

#ifndef SOAP_TYPE_api__initExecutionResponse
#define SOAP_TYPE_api__initExecutionResponse (37)
/* api:initExecutionResponse */
class SOAP_CMAC api__initExecutionResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_api__initExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__initExecutionResponse(): return_(NULL), soap(NULL) { api__initExecutionResponse::soap_default(NULL); }
	virtual ~api__initExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__getExecutionResults
#define SOAP_TYPE_api__getExecutionResults (38)
/* api:getExecutionResults */
class SOAP_CMAC api__getExecutionResults
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_api__getExecutionResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getExecutionResults(): soap(NULL) { api__getExecutionResults::soap_default(NULL); }
	virtual ~api__getExecutionResults() { }
};
#endif

#ifndef SOAP_TYPE_api__getExecutionResultsResponse
#define SOAP_TYPE_api__getExecutionResultsResponse (39)
/* api:getExecutionResultsResponse */
class SOAP_CMAC api__getExecutionResultsResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_api__getExecutionResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getExecutionResultsResponse(): return_(NULL), soap(NULL) { api__getExecutionResultsResponse::soap_default(NULL); }
	virtual ~api__getExecutionResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__killExecution
#define SOAP_TYPE_api__killExecution (40)
/* api:killExecution */
class SOAP_CMAC api__killExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_api__killExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__killExecution(): soap(NULL) { api__killExecution::soap_default(NULL); }
	virtual ~api__killExecution() { }
};
#endif

#ifndef SOAP_TYPE_api__getStdOut
#define SOAP_TYPE_api__getStdOut (41)
/* api:getStdOut */
class SOAP_CMAC api__getStdOut
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_api__getStdOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getStdOut(): soap(NULL) { api__getStdOut::soap_default(NULL); }
	virtual ~api__getStdOut() { }
};
#endif

#ifndef SOAP_TYPE_api__getStdOutResponse
#define SOAP_TYPE_api__getStdOutResponse (42)
/* api:getStdOutResponse */
class SOAP_CMAC api__getStdOutResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_api__getStdOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getStdOutResponse(): return_(NULL), soap(NULL) { api__getStdOutResponse::soap_default(NULL); }
	virtual ~api__getStdOutResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__getStdErr
#define SOAP_TYPE_api__getStdErr (43)
/* api:getStdErr */
class SOAP_CMAC api__getStdErr
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_api__getStdErr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getStdErr(): soap(NULL) { api__getStdErr::soap_default(NULL); }
	virtual ~api__getStdErr() { }
};
#endif

#ifndef SOAP_TYPE_api__getStdErrResponse
#define SOAP_TYPE_api__getStdErrResponse (44)
/* api:getStdErrResponse */
class SOAP_CMAC api__getStdErrResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_api__getStdErrResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getStdErrResponse(): return_(NULL), soap(NULL) { api__getStdErrResponse::soap_default(NULL); }
	virtual ~api__getStdErrResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__killExecutionResponse
#define SOAP_TYPE_api__killExecutionResponse (45)
/* api:killExecutionResponse */
class SOAP_CMAC api__killExecutionResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_api__killExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__killExecutionResponse(): return_(NULL), soap(NULL) { api__killExecutionResponse::soap_default(NULL); }
	virtual ~api__killExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__getExecution
#define SOAP_TYPE_api__getExecution (46)
/* api:getExecution */
class SOAP_CMAC api__getExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_api__getExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getExecution(): soap(NULL) { api__getExecution::soap_default(NULL); }
	virtual ~api__getExecution() { }
};
#endif

#ifndef SOAP_TYPE_api__getExecutionResponse
#define SOAP_TYPE_api__getExecutionResponse (47)
/* api:getExecutionResponse */
class SOAP_CMAC api__getExecutionResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_api__getExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__getExecutionResponse(): return_(NULL), soap(NULL) { api__getExecutionResponse::soap_default(NULL); }
	virtual ~api__getExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__playExecution
#define SOAP_TYPE_api__playExecution (48)
/* api:playExecution */
class SOAP_CMAC api__playExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_api__playExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__playExecution(): soap(NULL) { api__playExecution::soap_default(NULL); }
	virtual ~api__playExecution() { }
};
#endif

#ifndef SOAP_TYPE_api__playExecutionResponse
#define SOAP_TYPE_api__playExecutionResponse (49)
/* api:playExecutionResponse */
class SOAP_CMAC api__playExecutionResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_api__playExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__playExecutionResponse(): return_(NULL), soap(NULL) { api__playExecutionResponse::soap_default(NULL); }
	virtual ~api__playExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__listPipelines
#define SOAP_TYPE_api__listPipelines (50)
/* api:listPipelines */
class SOAP_CMAC api__listPipelines
{
public:
	std::string studyIdentifier;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_api__listPipelines */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__listPipelines(): soap(NULL) { api__listPipelines::soap_default(NULL); }
	virtual ~api__listPipelines() { }
};
#endif

#ifndef SOAP_TYPE_api__listPipelinesResponse
#define SOAP_TYPE_api__listPipelinesResponse (51)
/* api:listPipelinesResponse */
class SOAP_CMAC api__listPipelinesResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_api__listPipelinesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__listPipelinesResponse(): return_(NULL), soap(NULL) { api__listPipelinesResponse::soap_default(NULL); }
	virtual ~api__listPipelinesResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__listExecutions
#define SOAP_TYPE_api__listExecutions (52)
/* api:listExecutions */
class SOAP_CMAC api__listExecutions
{
public:
	std::string studyIdentifier;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_api__listExecutions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__listExecutions(): soap(NULL) { api__listExecutions::soap_default(NULL); }
	virtual ~api__listExecutions() { }
};
#endif

#ifndef SOAP_TYPE_api__listExecutionsResponse
#define SOAP_TYPE_api__listExecutionsResponse (53)
/* api:listExecutionsResponse */
class SOAP_CMAC api__listExecutionsResponse
{
public:
	api__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type api:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_api__listExecutionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__listExecutionsResponse(): return_(NULL), soap(NULL) { api__listExecutionsResponse::soap_default(NULL); }
	virtual ~api__listExecutionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_api__Pipeline
#define SOAP_TYPE_api__Pipeline (11)
/* api:Pipeline */
class SOAP_CMAC api__Pipeline : public api__Object
{
public:
	std::string identifier;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::vector<api__PipelineParameter * >parameters;	/* optional element of type api:PipelineParameter */
	std::vector<api__IntKeyStringValuePair * >errorCodesAndMessages;	/* optional element of type api:IntKeyStringValuePair */
	bool *canExecute;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_api__Pipeline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__Pipeline(): description(NULL), canExecute(NULL) { api__Pipeline::soap_default(NULL); }
	virtual ~api__Pipeline() { }
};
#endif

#ifndef SOAP_TYPE_api__Execution
#define SOAP_TYPE_api__Execution (19)
/* api:Execution */
class SOAP_CMAC api__Execution : public api__Object
{
public:
	std::string identifier;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string pipelineIdentifier;	/* required element of type xsd:string */
	int *timeout;	/* optional element of type xsd:int */
	enum api__ExecutionStatus status;	/* required element of type api:ExecutionStatus */
	std::vector<api__StringKeyParameterValuePair * >inputValue;	/* optional element of type api:StringKeyParameterValuePair */
	std::vector<api__StringKeyParameterValuePair * >returnedFile;	/* optional element of type api:StringKeyParameterValuePair */
	std::string *studyIdentifier;	/* optional element of type xsd:string */
	int *errorCode;	/* optional element of type xsd:int */
	LONG64 *startDate;	/* optional element of type xsd:long */
	LONG64 *endDate;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_api__Execution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__Execution(): timeout(NULL), studyIdentifier(NULL), errorCode(NULL), startDate(NULL), endDate(NULL) { api__Execution::soap_default(NULL); }
	virtual ~api__Execution() { }
};
#endif

#ifndef SOAP_TYPE_api__GlobalProperties
#define SOAP_TYPE_api__GlobalProperties (21)
/* api:GlobalProperties */
class SOAP_CMAC api__GlobalProperties : public api__Object
{
public:
	std::vector<api__IntKeyStringValuePair * >APIErrorCodesAndMessages;	/* optional element of type api:IntKeyStringValuePair */
	std::vector<std::string >supportedTransferProtocol;	/* required element of type xsd:string */
	std::vector<enum api__Module >supportedModule;	/* required element of type api:Module */
	std::string *email;	/* optional element of type xsd:string */
	std::string *platformDescription;	/* optional element of type xsd:string */
	int *minAuthorizedExecutionTimeout;	/* optional element of type xsd:int */
	int *maxAuthorizedExecutionTimeout;	/* optional element of type xsd:int */
	int *defaultExecutionTimeout;	/* optional element of type xsd:int */
	bool isKillExecutionSupported;	/* required element of type xsd:boolean */
	std::string *defaultStudy;	/* optional element of type xsd:string */
	std::string supportedAPIVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_api__GlobalProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         api__GlobalProperties(): email(NULL), platformDescription(NULL), minAuthorizedExecutionTimeout(NULL), maxAuthorizedExecutionTimeout(NULL), defaultExecutionTimeout(NULL), defaultStudy(NULL) { api__GlobalProperties::soap_default(NULL); }
	virtual ~api__GlobalProperties() { }
};
#endif

#ifndef SOAP_TYPE___api__authenticateSession
#define SOAP_TYPE___api__authenticateSession (104)
/* Operation wrapper: */
struct __api__authenticateSession
{
public:
	api__authenticateSession *api__authenticateSession_;	/* optional element of type api:authenticateSession */
};
#endif

#ifndef SOAP_TYPE___api__deleteExecution
#define SOAP_TYPE___api__deleteExecution (108)
/* Operation wrapper: */
struct __api__deleteExecution
{
public:
	api__deleteExecution *api__deleteExecution_;	/* optional element of type api:deleteExecution */
};
#endif

#ifndef SOAP_TYPE___api__getPipeline
#define SOAP_TYPE___api__getPipeline (112)
/* Operation wrapper: */
struct __api__getPipeline
{
public:
	api__getPipeline *api__getPipeline_;	/* optional element of type api:getPipeline */
};
#endif

#ifndef SOAP_TYPE___api__authenticateHTTP
#define SOAP_TYPE___api__authenticateHTTP (116)
/* Operation wrapper: */
struct __api__authenticateHTTP
{
public:
	api__authenticateHTTP *api__authenticateHTTP_;	/* optional element of type api:authenticateHTTP */
};
#endif

#ifndef SOAP_TYPE___api__logout
#define SOAP_TYPE___api__logout (120)
/* Operation wrapper: */
struct __api__logout
{
public:
	api__logout *api__logout_;	/* optional element of type api:logout */
};
#endif

#ifndef SOAP_TYPE___api__updateExecution
#define SOAP_TYPE___api__updateExecution (124)
/* Operation wrapper: */
struct __api__updateExecution
{
public:
	api__updateExecution *api__updateExecution_;	/* optional element of type api:updateExecution */
};
#endif

#ifndef SOAP_TYPE___api__getGlobalProperties
#define SOAP_TYPE___api__getGlobalProperties (128)
/* Operation wrapper: */
struct __api__getGlobalProperties
{
public:
	api__getGlobalProperties *api__getGlobalProperties_;	/* optional element of type api:getGlobalProperties */
};
#endif

#ifndef SOAP_TYPE___api__initExecution
#define SOAP_TYPE___api__initExecution (132)
/* Operation wrapper: */
struct __api__initExecution
{
public:
	api__initExecution *api__initExecution_;	/* optional element of type api:initExecution */
};
#endif

#ifndef SOAP_TYPE___api__getStdOut
#define SOAP_TYPE___api__getStdOut (136)
/* Operation wrapper: */
struct __api__getStdOut
{
public:
	api__getStdOut *api__getStdOut_;	/* optional element of type api:getStdOut */
};
#endif

#ifndef SOAP_TYPE___api__getStdErr
#define SOAP_TYPE___api__getStdErr (140)
/* Operation wrapper: */
struct __api__getStdErr
{
public:
	api__getStdErr *api__getStdErr_;	/* optional element of type api:getStdErr */
};
#endif

#ifndef SOAP_TYPE___api__getExecutionResults
#define SOAP_TYPE___api__getExecutionResults (144)
/* Operation wrapper: */
struct __api__getExecutionResults
{
public:
	api__getExecutionResults *api__getExecutionResults_;	/* optional element of type api:getExecutionResults */
};
#endif

#ifndef SOAP_TYPE___api__killExecution
#define SOAP_TYPE___api__killExecution (148)
/* Operation wrapper: */
struct __api__killExecution
{
public:
	api__killExecution *api__killExecution_;	/* optional element of type api:killExecution */
};
#endif

#ifndef SOAP_TYPE___api__getExecution
#define SOAP_TYPE___api__getExecution (152)
/* Operation wrapper: */
struct __api__getExecution
{
public:
	api__getExecution *api__getExecution_;	/* optional element of type api:getExecution */
};
#endif

#ifndef SOAP_TYPE___api__playExecution
#define SOAP_TYPE___api__playExecution (156)
/* Operation wrapper: */
struct __api__playExecution
{
public:
	api__playExecution *api__playExecution_;	/* optional element of type api:playExecution */
};
#endif

#ifndef SOAP_TYPE___api__listPipelines
#define SOAP_TYPE___api__listPipelines (160)
/* Operation wrapper: */
struct __api__listPipelines
{
public:
	api__listPipelines *api__listPipelines_;	/* optional element of type api:listPipelines */
};
#endif

#ifndef SOAP_TYPE___api__listExecutions
#define SOAP_TYPE___api__listExecutions (164)
/* Operation wrapper: */
struct __api__listExecutions
{
public:
	api__listExecutions *api__listExecutions_;	/* optional element of type api:listExecutions */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (165)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (166)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (168)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (171)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (172)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __api__authenticateSession(struct soap*, api__authenticateSession *api__authenticateSession_, api__authenticateSessionResponse *api__authenticateSessionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__deleteExecution(struct soap*, api__deleteExecution *api__deleteExecution_, api__deleteExecutionResponse *api__deleteExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__getPipeline(struct soap*, api__getPipeline *api__getPipeline_, api__getPipelineResponse *api__getPipelineResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__authenticateHTTP(struct soap*, api__authenticateHTTP *api__authenticateHTTP_, api__authenticateHTTPResponse *api__authenticateHTTPResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__logout(struct soap*, api__logout *api__logout_, api__logoutResponse *api__logoutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__updateExecution(struct soap*, api__updateExecution *api__updateExecution_, api__updateExecutionResponse *api__updateExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__getGlobalProperties(struct soap*, api__getGlobalProperties *api__getGlobalProperties_, api__getGlobalPropertiesResponse *api__getGlobalPropertiesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__initExecution(struct soap*, api__initExecution *api__initExecution_, api__initExecutionResponse *api__initExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__getStdOut(struct soap*, api__getStdOut *api__getStdOut_, api__getStdOutResponse *api__getStdOutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__getStdErr(struct soap*, api__getStdErr *api__getStdErr_, api__getStdErrResponse *api__getStdErrResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__getExecutionResults(struct soap*, api__getExecutionResults *api__getExecutionResults_, api__getExecutionResultsResponse *api__getExecutionResultsResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__killExecution(struct soap*, api__killExecution *api__killExecution_, api__killExecutionResponse *api__killExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__getExecution(struct soap*, api__getExecution *api__getExecution_, api__getExecutionResponse *api__getExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__playExecution(struct soap*, api__playExecution *api__playExecution_, api__playExecutionResponse *api__playExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__listPipelines(struct soap*, api__listPipelines *api__listPipelines_, api__listPipelinesResponse *api__listPipelinesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __api__listExecutions(struct soap*, api__listExecutions *api__listExecutions_, api__listExecutionsResponse *api__listExecutionsResponse_);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__authenticateSession(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__deleteExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__getPipeline(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__authenticateHTTP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__logout(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__updateExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__getGlobalProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__initExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__getStdOut(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__getStdErr(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__getExecutionResults(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__killExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__getExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__playExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__listPipelines(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___api__listExecutions(struct soap*);

#endif

/* End of soapStub.h */
