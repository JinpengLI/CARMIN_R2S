/* soapStub.h
   Generated by gSOAP 2.7.17 from api.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://france-life-imaging.fr/api"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns1__ParameterType
#define SOAP_TYPE_ns1__ParameterType (54)
/* ns1:ParameterType */
enum ns1__ParameterType {ns1__ParameterType__File = 0, ns1__ParameterType__String = 1, ns1__ParameterType__Boolean = 2, ns1__ParameterType__Int64 = 3, ns1__ParameterType__Double = 4, ns1__ParameterType__List = 5};
#endif

#ifndef SOAP_TYPE_ns1__ExecutionStatus
#define SOAP_TYPE_ns1__ExecutionStatus (55)
/* ns1:ExecutionStatus */
enum ns1__ExecutionStatus {ns1__ExecutionStatus__Initializing = 0, ns1__ExecutionStatus__Ready = 1, ns1__ExecutionStatus__Running = 2, ns1__ExecutionStatus__Finished = 3, ns1__ExecutionStatus__InitializationFailed = 4, ns1__ExecutionStatus__ExecutionFailed = 5, ns1__ExecutionStatus__Unknown = 6, ns1__ExecutionStatus__Killed = 7};
#endif

#ifndef SOAP_TYPE_ns1__Module
#define SOAP_TYPE_ns1__Module (56)
/* ns1:Module */
enum ns1__Module {ns1__Module__Processing = 0, ns1__Module__Data = 1, ns1__Module__Management = 2, ns1__Module__Commercial = 3};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__authenticateSession
#define SOAP_TYPE_ns1__authenticateSession (8)
/* ns1:authenticateSession */
class SOAP_CMAC ns1__authenticateSession
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string password;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__authenticateSession */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__authenticateSession(): soap(NULL) { ns1__authenticateSession::soap_default(NULL); }
	virtual ~ns1__authenticateSession() { }
};
#endif

#ifndef SOAP_TYPE_ns1__authenticateSessionResponse
#define SOAP_TYPE_ns1__authenticateSessionResponse (9)
/* ns1:authenticateSessionResponse */
class SOAP_CMAC ns1__authenticateSessionResponse
{
public:
	class ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__authenticateSessionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__authenticateSessionResponse(): return_(NULL), soap(NULL) { ns1__authenticateSessionResponse::soap_default(NULL); }
	virtual ~ns1__authenticateSessionResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__union_Response
#define SOAP_TYPE__ns1__union_Response (81)
/* xsd:choice */
union _ns1__union_Response
{
#define SOAP_UNION__ns1__union_Response_returnedValuePipeline	(1)
	std::vector<class ns1__Pipeline * >*returnedValuePipeline;
#define SOAP_UNION__ns1__union_Response_returnedValueExecution	(2)
	class ns1__Execution *returnedValueExecution;
#define SOAP_UNION__ns1__union_Response_returnedValueGlobalProp	(3)
	class ns1__GlobalProperties *returnedValueGlobalProp;
#define SOAP_UNION__ns1__union_Response_returnedValueStr	(4)
	std::vector<std::string >*returnedValueStr;
#define SOAP_UNION__ns1__union_Response_returnedValueListStrings	(5)
	std::vector<class ns1__ArrayOfStrings * >*returnedValueListStrings;
#define SOAP_UNION__ns1__union_Response_returnedValueListExecutions	(6)
	std::vector<class ns1__ArrayOfExecutions * >*returnedValueListExecutions;
#define SOAP_UNION__ns1__union_Response_returnedValueListPipelines	(7)
	std::vector<class ns1__ArrayOfPipelines * >*returnedValueListPipelines;
#define SOAP_UNION__ns1__union_Response_returnedValueStatus	(8)
	enum ns1__ExecutionStatus *returnedValueStatus;
#define SOAP_UNION__ns1__union_Response_returnedValuePairKey	(9)
	std::vector<class ns1__PipelineKeyBooleanValuePair * >*returnedValuePairKey;
};
#endif

#ifndef SOAP_TYPE_ns1__Response
#define SOAP_TYPE_ns1__Response (10)
/* ns1:Response */
class SOAP_CMAC ns1__Response
{
public:
	int statusCode;	/* required element of type xsd:int */
	std::string *errorMessage;	/* optional element of type xsd:string */
	int __union_Response;	/* union discriminant (of union defined below) */
	union _ns1__union_Response union_Response;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Response(): errorMessage(NULL), soap(NULL) { ns1__Response::soap_default(NULL); }
	virtual ~ns1__Response() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Object
#define SOAP_TYPE_ns1__Object (12)
/* ns1:Object */
class SOAP_CMAC ns1__Object
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Object(): soap(NULL) { ns1__Object::soap_default(NULL); }
	virtual ~ns1__Object() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfStrings
#define SOAP_TYPE_ns1__ArrayOfStrings (13)
/* ns1:ArrayOfStrings */
class SOAP_CMAC ns1__ArrayOfStrings
{
public:
	std::vector<std::string >item;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__ArrayOfStrings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfStrings(): soap(NULL) { ns1__ArrayOfStrings::soap_default(NULL); }
	virtual ~ns1__ArrayOfStrings() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfPipelines
#define SOAP_TYPE_ns1__ArrayOfPipelines (14)
/* ns1:ArrayOfPipelines */
class SOAP_CMAC ns1__ArrayOfPipelines
{
public:
	std::vector<ns1__Pipeline * >item;	/* optional element of type ns1:Pipeline */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__ArrayOfPipelines */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfPipelines(): soap(NULL) { ns1__ArrayOfPipelines::soap_default(NULL); }
	virtual ~ns1__ArrayOfPipelines() { }
};
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfExecutions
#define SOAP_TYPE_ns1__ArrayOfExecutions (15)
/* ns1:ArrayOfExecutions */
class SOAP_CMAC ns1__ArrayOfExecutions
{
public:
	std::vector<ns1__Execution * >item;	/* optional element of type ns1:Execution */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__ArrayOfExecutions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ArrayOfExecutions(): soap(NULL) { ns1__ArrayOfExecutions::soap_default(NULL); }
	virtual ~ns1__ArrayOfExecutions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PipelineParameter
#define SOAP_TYPE_ns1__PipelineParameter (16)
/* ns1:PipelineParameter */
class SOAP_CMAC ns1__PipelineParameter
{
public:
	std::string name;	/* required element of type xsd:string */
	enum ns1__ParameterType type;	/* required element of type ns1:ParameterType */
	bool isOptional;	/* required element of type xsd:boolean */
	bool isReturnedValue;	/* required element of type xsd:boolean */
	class ns1__ParameterTypedValue *defaultValue;	/* optional element of type ns1:ParameterTypedValue */
	std::string *description;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__PipelineParameter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PipelineParameter(): defaultValue(NULL), description(NULL), soap(NULL) { ns1__PipelineParameter::soap_default(NULL); }
	virtual ~ns1__PipelineParameter() { }
};
#endif

#ifndef SOAP_TYPE__ns1__union_ParameterTypedValue
#define SOAP_TYPE__ns1__union_ParameterTypedValue (86)
/* xsd:choice */
union _ns1__union_ParameterTypedValue
{
#define SOAP_UNION__ns1__union_ParameterTypedValue_valueStr	(1)
	std::string *valueStr;
#define SOAP_UNION__ns1__union_ParameterTypedValue_valueBool	(2)
	bool valueBool;
#define SOAP_UNION__ns1__union_ParameterTypedValue_valueInt	(3)
	int valueInt;
#define SOAP_UNION__ns1__union_ParameterTypedValue_valueDouble	(4)
	double valueDouble;
};
#endif

#ifndef SOAP_TYPE_ns1__ParameterTypedValue
#define SOAP_TYPE_ns1__ParameterTypedValue (17)
/* ns1:ParameterTypedValue */
class SOAP_CMAC ns1__ParameterTypedValue
{
public:
	enum ns1__ParameterType type;	/* required element of type ns1:ParameterType */
	int __union_ParameterTypedValue;	/* union discriminant (of union defined below) */
	union _ns1__union_ParameterTypedValue union_ParameterTypedValue;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__ParameterTypedValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__ParameterTypedValue(): soap(NULL) { ns1__ParameterTypedValue::soap_default(NULL); }
	virtual ~ns1__ParameterTypedValue() { }
};
#endif

#ifndef SOAP_TYPE_ns1__IntKeyStringValuePair
#define SOAP_TYPE_ns1__IntKeyStringValuePair (18)
/* ns1:IntKeyStringValuePair */
class SOAP_CMAC ns1__IntKeyStringValuePair
{
public:
	int name;	/* required element of type xsd:int */
	std::string value;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__IntKeyStringValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__IntKeyStringValuePair(): soap(NULL) { ns1__IntKeyStringValuePair::soap_default(NULL); }
	virtual ~ns1__IntKeyStringValuePair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__StringKeyParameterValuePair
#define SOAP_TYPE_ns1__StringKeyParameterValuePair (20)
/* ns1:StringKeyParameterValuePair */
class SOAP_CMAC ns1__StringKeyParameterValuePair
{
public:
	std::string name;	/* required element of type xsd:string */
	ns1__ParameterTypedValue *value;	/* required element of type ns1:ParameterTypedValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__StringKeyParameterValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StringKeyParameterValuePair(): value(NULL), soap(NULL) { ns1__StringKeyParameterValuePair::soap_default(NULL); }
	virtual ~ns1__StringKeyParameterValuePair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__PipelineKeyBooleanValuePair
#define SOAP_TYPE_ns1__PipelineKeyBooleanValuePair (22)
/* ns1:PipelineKeyBooleanValuePair */
class SOAP_CMAC ns1__PipelineKeyBooleanValuePair
{
public:
	ns1__Pipeline *name;	/* required element of type ns1:Pipeline */
	bool value;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns1__PipelineKeyBooleanValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__PipelineKeyBooleanValuePair(): name(NULL), soap(NULL) { ns1__PipelineKeyBooleanValuePair::soap_default(NULL); }
	virtual ~ns1__PipelineKeyBooleanValuePair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__deleteExecution
#define SOAP_TYPE_ns1__deleteExecution (23)
/* ns1:deleteExecution */
class SOAP_CMAC ns1__deleteExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	bool deleteFiles;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_ns1__deleteExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__deleteExecution(): soap(NULL) { ns1__deleteExecution::soap_default(NULL); }
	virtual ~ns1__deleteExecution() { }
};
#endif

#ifndef SOAP_TYPE_ns1__deleteExecutionResponse
#define SOAP_TYPE_ns1__deleteExecutionResponse (24)
/* ns1:deleteExecutionResponse */
class SOAP_CMAC ns1__deleteExecutionResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_ns1__deleteExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__deleteExecutionResponse(): return_(NULL), soap(NULL) { ns1__deleteExecutionResponse::soap_default(NULL); }
	virtual ~ns1__deleteExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getPipeline
#define SOAP_TYPE_ns1__getPipeline (25)
/* ns1:getPipeline */
class SOAP_CMAC ns1__getPipeline
{
public:
	std::string pipelineId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_ns1__getPipeline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getPipeline(): soap(NULL) { ns1__getPipeline::soap_default(NULL); }
	virtual ~ns1__getPipeline() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getPipelineResponse
#define SOAP_TYPE_ns1__getPipelineResponse (26)
/* ns1:getPipelineResponse */
class SOAP_CMAC ns1__getPipelineResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_ns1__getPipelineResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getPipelineResponse(): return_(NULL), soap(NULL) { ns1__getPipelineResponse::soap_default(NULL); }
	virtual ~ns1__getPipelineResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__authenticateHTTP
#define SOAP_TYPE_ns1__authenticateHTTP (27)
/* ns1:authenticateHTTP */
class SOAP_CMAC ns1__authenticateHTTP
{
public:
	std::string userName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_ns1__authenticateHTTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__authenticateHTTP(): soap(NULL) { ns1__authenticateHTTP::soap_default(NULL); }
	virtual ~ns1__authenticateHTTP() { }
};
#endif

#ifndef SOAP_TYPE_ns1__authenticateHTTPResponse
#define SOAP_TYPE_ns1__authenticateHTTPResponse (28)
/* ns1:authenticateHTTPResponse */
class SOAP_CMAC ns1__authenticateHTTPResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_ns1__authenticateHTTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__authenticateHTTPResponse(): return_(NULL), soap(NULL) { ns1__authenticateHTTPResponse::soap_default(NULL); }
	virtual ~ns1__authenticateHTTPResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__logout
#define SOAP_TYPE_ns1__logout (29)
/* ns1:logout */
class SOAP_CMAC ns1__logout
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_ns1__logout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__logout(): soap(NULL) { ns1__logout::soap_default(NULL); }
	virtual ~ns1__logout() { }
};
#endif

#ifndef SOAP_TYPE_ns1__logoutResponse
#define SOAP_TYPE_ns1__logoutResponse (30)
/* ns1:logoutResponse */
class SOAP_CMAC ns1__logoutResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_ns1__logoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__logoutResponse(): return_(NULL), soap(NULL) { ns1__logoutResponse::soap_default(NULL); }
	virtual ~ns1__logoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__updateExecution
#define SOAP_TYPE_ns1__updateExecution (31)
/* ns1:updateExecution */
class SOAP_CMAC ns1__updateExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	std::vector<class ns1__StringKeyValuePair * >keyValuePair;	/* required element of type ns1:StringKeyValuePair */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_ns1__updateExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__updateExecution(): soap(NULL) { ns1__updateExecution::soap_default(NULL); }
	virtual ~ns1__updateExecution() { }
};
#endif

#ifndef SOAP_TYPE__ns1__union_StringKeyValuePair
#define SOAP_TYPE__ns1__union_StringKeyValuePair (89)
/* xsd:choice */
union _ns1__union_StringKeyValuePair
{
#define SOAP_UNION__ns1__union_StringKeyValuePair_valueStr	(1)
	std::string *valueStr;
#define SOAP_UNION__ns1__union_StringKeyValuePair_valueInt	(2)
	int valueInt;
#define SOAP_UNION__ns1__union_StringKeyValuePair_valueStatus	(3)
	enum ns1__ExecutionStatus valueStatus;
#define SOAP_UNION__ns1__union_StringKeyValuePair_valueParamType	(4)
	ns1__ParameterTypedValue *valueParamType;
};
#endif

#ifndef SOAP_TYPE_ns1__StringKeyValuePair
#define SOAP_TYPE_ns1__StringKeyValuePair (32)
/* ns1:StringKeyValuePair */
class SOAP_CMAC ns1__StringKeyValuePair
{
public:
	std::string name;	/* required element of type xsd:string */
	int __union_StringKeyValuePair;	/* union discriminant (of union defined below) */
	union _ns1__union_StringKeyValuePair union_StringKeyValuePair;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_ns1__StringKeyValuePair */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__StringKeyValuePair(): soap(NULL) { ns1__StringKeyValuePair::soap_default(NULL); }
	virtual ~ns1__StringKeyValuePair() { }
};
#endif

#ifndef SOAP_TYPE_ns1__updateExecutionResponse
#define SOAP_TYPE_ns1__updateExecutionResponse (33)
/* ns1:updateExecutionResponse */
class SOAP_CMAC ns1__updateExecutionResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_ns1__updateExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__updateExecutionResponse(): return_(NULL), soap(NULL) { ns1__updateExecutionResponse::soap_default(NULL); }
	virtual ~ns1__updateExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getGlobalProperties
#define SOAP_TYPE_ns1__getGlobalProperties (34)
/* ns1:getGlobalProperties */
class SOAP_CMAC ns1__getGlobalProperties
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_ns1__getGlobalProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getGlobalProperties(): soap(NULL) { ns1__getGlobalProperties::soap_default(NULL); }
	virtual ~ns1__getGlobalProperties() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getGlobalPropertiesResponse
#define SOAP_TYPE_ns1__getGlobalPropertiesResponse (35)
/* ns1:getGlobalPropertiesResponse */
class SOAP_CMAC ns1__getGlobalPropertiesResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_ns1__getGlobalPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getGlobalPropertiesResponse(): return_(NULL), soap(NULL) { ns1__getGlobalPropertiesResponse::soap_default(NULL); }
	virtual ~ns1__getGlobalPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__initExecution
#define SOAP_TYPE_ns1__initExecution (36)
/* ns1:initExecution */
class SOAP_CMAC ns1__initExecution
{
public:
	std::string pipelineId;	/* required element of type xsd:string */
	std::vector<ns1__StringKeyParameterValuePair * >inputValue;	/* required element of type ns1:StringKeyParameterValuePair */
	int *timeout;	/* optional element of type xsd:int */
	std::string *executionName;	/* optional element of type xsd:string */
	std::string *studyId;	/* optional element of type xsd:string */
	bool *playExecution;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_ns1__initExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__initExecution(): timeout(NULL), executionName(NULL), studyId(NULL), playExecution(NULL), soap(NULL) { ns1__initExecution::soap_default(NULL); }
	virtual ~ns1__initExecution() { }
};
#endif

#ifndef SOAP_TYPE_ns1__initExecutionResponse
#define SOAP_TYPE_ns1__initExecutionResponse (37)
/* ns1:initExecutionResponse */
class SOAP_CMAC ns1__initExecutionResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_ns1__initExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__initExecutionResponse(): return_(NULL), soap(NULL) { ns1__initExecutionResponse::soap_default(NULL); }
	virtual ~ns1__initExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getExecutionResults
#define SOAP_TYPE_ns1__getExecutionResults (38)
/* ns1:getExecutionResults */
class SOAP_CMAC ns1__getExecutionResults
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_ns1__getExecutionResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getExecutionResults(): soap(NULL) { ns1__getExecutionResults::soap_default(NULL); }
	virtual ~ns1__getExecutionResults() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getExecutionResultsResponse
#define SOAP_TYPE_ns1__getExecutionResultsResponse (39)
/* ns1:getExecutionResultsResponse */
class SOAP_CMAC ns1__getExecutionResultsResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_ns1__getExecutionResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getExecutionResultsResponse(): return_(NULL), soap(NULL) { ns1__getExecutionResultsResponse::soap_default(NULL); }
	virtual ~ns1__getExecutionResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__killExecution
#define SOAP_TYPE_ns1__killExecution (40)
/* ns1:killExecution */
class SOAP_CMAC ns1__killExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_ns1__killExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__killExecution(): soap(NULL) { ns1__killExecution::soap_default(NULL); }
	virtual ~ns1__killExecution() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getStdOut
#define SOAP_TYPE_ns1__getStdOut (41)
/* ns1:getStdOut */
class SOAP_CMAC ns1__getStdOut
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_ns1__getStdOut */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getStdOut(): soap(NULL) { ns1__getStdOut::soap_default(NULL); }
	virtual ~ns1__getStdOut() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getStdOutResponse
#define SOAP_TYPE_ns1__getStdOutResponse (42)
/* ns1:getStdOutResponse */
class SOAP_CMAC ns1__getStdOutResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_ns1__getStdOutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getStdOutResponse(): return_(NULL), soap(NULL) { ns1__getStdOutResponse::soap_default(NULL); }
	virtual ~ns1__getStdOutResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getStdErr
#define SOAP_TYPE_ns1__getStdErr (43)
/* ns1:getStdErr */
class SOAP_CMAC ns1__getStdErr
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_ns1__getStdErr */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getStdErr(): soap(NULL) { ns1__getStdErr::soap_default(NULL); }
	virtual ~ns1__getStdErr() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getStdErrResponse
#define SOAP_TYPE_ns1__getStdErrResponse (44)
/* ns1:getStdErrResponse */
class SOAP_CMAC ns1__getStdErrResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_ns1__getStdErrResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getStdErrResponse(): return_(NULL), soap(NULL) { ns1__getStdErrResponse::soap_default(NULL); }
	virtual ~ns1__getStdErrResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__killExecutionResponse
#define SOAP_TYPE_ns1__killExecutionResponse (45)
/* ns1:killExecutionResponse */
class SOAP_CMAC ns1__killExecutionResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_ns1__killExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__killExecutionResponse(): return_(NULL), soap(NULL) { ns1__killExecutionResponse::soap_default(NULL); }
	virtual ~ns1__killExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getExecution
#define SOAP_TYPE_ns1__getExecution (46)
/* ns1:getExecution */
class SOAP_CMAC ns1__getExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_ns1__getExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getExecution(): soap(NULL) { ns1__getExecution::soap_default(NULL); }
	virtual ~ns1__getExecution() { }
};
#endif

#ifndef SOAP_TYPE_ns1__getExecutionResponse
#define SOAP_TYPE_ns1__getExecutionResponse (47)
/* ns1:getExecutionResponse */
class SOAP_CMAC ns1__getExecutionResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_ns1__getExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__getExecutionResponse(): return_(NULL), soap(NULL) { ns1__getExecutionResponse::soap_default(NULL); }
	virtual ~ns1__getExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__playExecution
#define SOAP_TYPE_ns1__playExecution (48)
/* ns1:playExecution */
class SOAP_CMAC ns1__playExecution
{
public:
	std::string executionId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_ns1__playExecution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__playExecution(): soap(NULL) { ns1__playExecution::soap_default(NULL); }
	virtual ~ns1__playExecution() { }
};
#endif

#ifndef SOAP_TYPE_ns1__playExecutionResponse
#define SOAP_TYPE_ns1__playExecutionResponse (49)
/* ns1:playExecutionResponse */
class SOAP_CMAC ns1__playExecutionResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_ns1__playExecutionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__playExecutionResponse(): return_(NULL), soap(NULL) { ns1__playExecutionResponse::soap_default(NULL); }
	virtual ~ns1__playExecutionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__listPipelines
#define SOAP_TYPE_ns1__listPipelines (50)
/* ns1:listPipelines */
class SOAP_CMAC ns1__listPipelines
{
public:
	std::string studyIdentifier;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_ns1__listPipelines */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__listPipelines(): soap(NULL) { ns1__listPipelines::soap_default(NULL); }
	virtual ~ns1__listPipelines() { }
};
#endif

#ifndef SOAP_TYPE_ns1__listPipelinesResponse
#define SOAP_TYPE_ns1__listPipelinesResponse (51)
/* ns1:listPipelinesResponse */
class SOAP_CMAC ns1__listPipelinesResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_ns1__listPipelinesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__listPipelinesResponse(): return_(NULL), soap(NULL) { ns1__listPipelinesResponse::soap_default(NULL); }
	virtual ~ns1__listPipelinesResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__listExecutions
#define SOAP_TYPE_ns1__listExecutions (52)
/* ns1:listExecutions */
class SOAP_CMAC ns1__listExecutions
{
public:
	std::string studyIdentifier;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_ns1__listExecutions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__listExecutions(): soap(NULL) { ns1__listExecutions::soap_default(NULL); }
	virtual ~ns1__listExecutions() { }
};
#endif

#ifndef SOAP_TYPE_ns1__listExecutionsResponse
#define SOAP_TYPE_ns1__listExecutionsResponse (53)
/* ns1:listExecutionsResponse */
class SOAP_CMAC ns1__listExecutionsResponse
{
public:
	ns1__Response *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Response */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_ns1__listExecutionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__listExecutionsResponse(): return_(NULL), soap(NULL) { ns1__listExecutionsResponse::soap_default(NULL); }
	virtual ~ns1__listExecutionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Pipeline
#define SOAP_TYPE_ns1__Pipeline (11)
/* ns1:Pipeline */
class SOAP_CMAC ns1__Pipeline : public ns1__Object
{
public:
	std::string identifier;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string *description;	/* optional element of type xsd:string */
	std::string version;	/* required element of type xsd:string */
	std::vector<ns1__PipelineParameter * >parameters;	/* optional element of type ns1:PipelineParameter */
	std::vector<ns1__IntKeyStringValuePair * >errorCodesAndMessages;	/* optional element of type ns1:IntKeyStringValuePair */
	bool *canExecute;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__Pipeline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Pipeline(): description(NULL), canExecute(NULL) { ns1__Pipeline::soap_default(NULL); }
	virtual ~ns1__Pipeline() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Execution
#define SOAP_TYPE_ns1__Execution (19)
/* ns1:Execution */
class SOAP_CMAC ns1__Execution : public ns1__Object
{
public:
	std::string identifier;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string pipelineIdentifier;	/* required element of type xsd:string */
	int *timeout;	/* optional element of type xsd:int */
	enum ns1__ExecutionStatus status;	/* required element of type ns1:ExecutionStatus */
	std::vector<ns1__StringKeyParameterValuePair * >inputValue;	/* optional element of type ns1:StringKeyParameterValuePair */
	std::vector<ns1__StringKeyParameterValuePair * >returnedFile;	/* optional element of type ns1:StringKeyParameterValuePair */
	std::string *studyIdentifier;	/* optional element of type xsd:string */
	int *errorCode;	/* optional element of type xsd:int */
	LONG64 *startDate;	/* optional element of type xsd:long */
	LONG64 *endDate;	/* optional element of type xsd:long */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__Execution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Execution(): timeout(NULL), studyIdentifier(NULL), errorCode(NULL), startDate(NULL), endDate(NULL) { ns1__Execution::soap_default(NULL); }
	virtual ~ns1__Execution() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GlobalProperties
#define SOAP_TYPE_ns1__GlobalProperties (21)
/* ns1:GlobalProperties */
class SOAP_CMAC ns1__GlobalProperties : public ns1__Object
{
public:
	std::vector<ns1__IntKeyStringValuePair * >APIErrorCodesAndMessages;	/* optional element of type ns1:IntKeyStringValuePair */
	std::vector<std::string >supportedTransferProtocol;	/* required element of type xsd:string */
	std::vector<enum ns1__Module >supportedModule;	/* required element of type ns1:Module */
	std::string *email;	/* optional element of type xsd:string */
	std::string *platformDescription;	/* optional element of type xsd:string */
	int *minAuthorizedExecutionTimeout;	/* optional element of type xsd:int */
	int *maxAuthorizedExecutionTimeout;	/* optional element of type xsd:int */
	int *defaultExecutionTimeout;	/* optional element of type xsd:int */
	bool isKillExecutionSupported;	/* required element of type xsd:boolean */
	std::string *defaultStudy;	/* optional element of type xsd:string */
	std::string supportedAPIVersion;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__GlobalProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GlobalProperties(): email(NULL), platformDescription(NULL), minAuthorizedExecutionTimeout(NULL), maxAuthorizedExecutionTimeout(NULL), defaultExecutionTimeout(NULL), defaultStudy(NULL) { ns1__GlobalProperties::soap_default(NULL); }
	virtual ~ns1__GlobalProperties() { }
};
#endif

#ifndef SOAP_TYPE___ns1__authenticateSession
#define SOAP_TYPE___ns1__authenticateSession (104)
/* Operation wrapper: */
struct __ns1__authenticateSession
{
public:
	ns1__authenticateSession *ns1__authenticateSession_;	/* optional element of type ns1:authenticateSession */
};
#endif

#ifndef SOAP_TYPE___ns1__deleteExecution
#define SOAP_TYPE___ns1__deleteExecution (108)
/* Operation wrapper: */
struct __ns1__deleteExecution
{
public:
	ns1__deleteExecution *ns1__deleteExecution_;	/* optional element of type ns1:deleteExecution */
};
#endif

#ifndef SOAP_TYPE___ns1__getPipeline
#define SOAP_TYPE___ns1__getPipeline (112)
/* Operation wrapper: */
struct __ns1__getPipeline
{
public:
	ns1__getPipeline *ns1__getPipeline_;	/* optional element of type ns1:getPipeline */
};
#endif

#ifndef SOAP_TYPE___ns1__authenticateHTTP
#define SOAP_TYPE___ns1__authenticateHTTP (116)
/* Operation wrapper: */
struct __ns1__authenticateHTTP
{
public:
	ns1__authenticateHTTP *ns1__authenticateHTTP_;	/* optional element of type ns1:authenticateHTTP */
};
#endif

#ifndef SOAP_TYPE___ns1__logout
#define SOAP_TYPE___ns1__logout (120)
/* Operation wrapper: */
struct __ns1__logout
{
public:
	ns1__logout *ns1__logout_;	/* optional element of type ns1:logout */
};
#endif

#ifndef SOAP_TYPE___ns1__updateExecution
#define SOAP_TYPE___ns1__updateExecution (124)
/* Operation wrapper: */
struct __ns1__updateExecution
{
public:
	ns1__updateExecution *ns1__updateExecution_;	/* optional element of type ns1:updateExecution */
};
#endif

#ifndef SOAP_TYPE___ns1__getGlobalProperties
#define SOAP_TYPE___ns1__getGlobalProperties (128)
/* Operation wrapper: */
struct __ns1__getGlobalProperties
{
public:
	ns1__getGlobalProperties *ns1__getGlobalProperties_;	/* optional element of type ns1:getGlobalProperties */
};
#endif

#ifndef SOAP_TYPE___ns1__initExecution
#define SOAP_TYPE___ns1__initExecution (132)
/* Operation wrapper: */
struct __ns1__initExecution
{
public:
	ns1__initExecution *ns1__initExecution_;	/* optional element of type ns1:initExecution */
};
#endif

#ifndef SOAP_TYPE___ns1__getStdOut
#define SOAP_TYPE___ns1__getStdOut (136)
/* Operation wrapper: */
struct __ns1__getStdOut
{
public:
	ns1__getStdOut *ns1__getStdOut_;	/* optional element of type ns1:getStdOut */
};
#endif

#ifndef SOAP_TYPE___ns1__getStdErr
#define SOAP_TYPE___ns1__getStdErr (140)
/* Operation wrapper: */
struct __ns1__getStdErr
{
public:
	ns1__getStdErr *ns1__getStdErr_;	/* optional element of type ns1:getStdErr */
};
#endif

#ifndef SOAP_TYPE___ns1__getExecutionResults
#define SOAP_TYPE___ns1__getExecutionResults (144)
/* Operation wrapper: */
struct __ns1__getExecutionResults
{
public:
	ns1__getExecutionResults *ns1__getExecutionResults_;	/* optional element of type ns1:getExecutionResults */
};
#endif

#ifndef SOAP_TYPE___ns1__killExecution
#define SOAP_TYPE___ns1__killExecution (148)
/* Operation wrapper: */
struct __ns1__killExecution
{
public:
	ns1__killExecution *ns1__killExecution_;	/* optional element of type ns1:killExecution */
};
#endif

#ifndef SOAP_TYPE___ns1__getExecution
#define SOAP_TYPE___ns1__getExecution (152)
/* Operation wrapper: */
struct __ns1__getExecution
{
public:
	ns1__getExecution *ns1__getExecution_;	/* optional element of type ns1:getExecution */
};
#endif

#ifndef SOAP_TYPE___ns1__playExecution
#define SOAP_TYPE___ns1__playExecution (156)
/* Operation wrapper: */
struct __ns1__playExecution
{
public:
	ns1__playExecution *ns1__playExecution_;	/* optional element of type ns1:playExecution */
};
#endif

#ifndef SOAP_TYPE___ns1__listPipelines
#define SOAP_TYPE___ns1__listPipelines (160)
/* Operation wrapper: */
struct __ns1__listPipelines
{
public:
	ns1__listPipelines *ns1__listPipelines_;	/* optional element of type ns1:listPipelines */
};
#endif

#ifndef SOAP_TYPE___ns1__listExecutions
#define SOAP_TYPE___ns1__listExecutions (164)
/* Operation wrapper: */
struct __ns1__listExecutions
{
public:
	ns1__listExecutions *ns1__listExecutions_;	/* optional element of type ns1:listExecutions */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (165)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (166)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (168)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (171)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (172)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__authenticateSession(struct soap*, ns1__authenticateSession *ns1__authenticateSession_, ns1__authenticateSessionResponse *ns1__authenticateSessionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__deleteExecution(struct soap*, ns1__deleteExecution *ns1__deleteExecution_, ns1__deleteExecutionResponse *ns1__deleteExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getPipeline(struct soap*, ns1__getPipeline *ns1__getPipeline_, ns1__getPipelineResponse *ns1__getPipelineResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__authenticateHTTP(struct soap*, ns1__authenticateHTTP *ns1__authenticateHTTP_, ns1__authenticateHTTPResponse *ns1__authenticateHTTPResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__logout(struct soap*, ns1__logout *ns1__logout_, ns1__logoutResponse *ns1__logoutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__updateExecution(struct soap*, ns1__updateExecution *ns1__updateExecution_, ns1__updateExecutionResponse *ns1__updateExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getGlobalProperties(struct soap*, ns1__getGlobalProperties *ns1__getGlobalProperties_, ns1__getGlobalPropertiesResponse *ns1__getGlobalPropertiesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__initExecution(struct soap*, ns1__initExecution *ns1__initExecution_, ns1__initExecutionResponse *ns1__initExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getStdOut(struct soap*, ns1__getStdOut *ns1__getStdOut_, ns1__getStdOutResponse *ns1__getStdOutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getStdErr(struct soap*, ns1__getStdErr *ns1__getStdErr_, ns1__getStdErrResponse *ns1__getStdErrResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getExecutionResults(struct soap*, ns1__getExecutionResults *ns1__getExecutionResults_, ns1__getExecutionResultsResponse *ns1__getExecutionResultsResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__killExecution(struct soap*, ns1__killExecution *ns1__killExecution_, ns1__killExecutionResponse *ns1__killExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__getExecution(struct soap*, ns1__getExecution *ns1__getExecution_, ns1__getExecutionResponse *ns1__getExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__playExecution(struct soap*, ns1__playExecution *ns1__playExecution_, ns1__playExecutionResponse *ns1__playExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__listPipelines(struct soap*, ns1__listPipelines *ns1__listPipelines_, ns1__listPipelinesResponse *ns1__listPipelinesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__listExecutions(struct soap*, ns1__listExecutions *ns1__listExecutions_, ns1__listExecutionsResponse *ns1__listExecutionsResponse_);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__authenticateSession(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__deleteExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getPipeline(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__authenticateHTTP(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__logout(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__updateExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getGlobalProperties(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__initExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getStdOut(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getStdErr(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getExecutionResults(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__killExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__playExecution(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__listPipelines(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__listExecutions(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__authenticateSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__authenticateSession *ns1__authenticateSession_, ns1__authenticateSessionResponse *ns1__authenticateSessionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__deleteExecution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__deleteExecution *ns1__deleteExecution_, ns1__deleteExecutionResponse *ns1__deleteExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getPipeline(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__getPipeline *ns1__getPipeline_, ns1__getPipelineResponse *ns1__getPipelineResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__authenticateHTTP(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__authenticateHTTP *ns1__authenticateHTTP_, ns1__authenticateHTTPResponse *ns1__authenticateHTTPResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__logout(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__logout *ns1__logout_, ns1__logoutResponse *ns1__logoutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__updateExecution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__updateExecution *ns1__updateExecution_, ns1__updateExecutionResponse *ns1__updateExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getGlobalProperties(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__getGlobalProperties *ns1__getGlobalProperties_, ns1__getGlobalPropertiesResponse *ns1__getGlobalPropertiesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__initExecution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__initExecution *ns1__initExecution_, ns1__initExecutionResponse *ns1__initExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getStdOut(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__getStdOut *ns1__getStdOut_, ns1__getStdOutResponse *ns1__getStdOutResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getStdErr(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__getStdErr *ns1__getStdErr_, ns1__getStdErrResponse *ns1__getStdErrResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getExecutionResults(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__getExecutionResults *ns1__getExecutionResults_, ns1__getExecutionResultsResponse *ns1__getExecutionResultsResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__killExecution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__killExecution *ns1__killExecution_, ns1__killExecutionResponse *ns1__killExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getExecution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__getExecution *ns1__getExecution_, ns1__getExecutionResponse *ns1__getExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__playExecution(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__playExecution *ns1__playExecution_, ns1__playExecutionResponse *ns1__playExecutionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__listPipelines(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__listPipelines *ns1__listPipelines_, ns1__listPipelinesResponse *ns1__listPipelinesResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__listExecutions(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__listExecutions *ns1__listExecutions_, ns1__listExecutionsResponse *ns1__listExecutionsResponse_);

#endif

/* End of soapStub.h */
